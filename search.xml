<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Javascript要点</title>
      <link href="/Blog/posts/67a2d32c/"/>
      <url>/Blog/posts/67a2d32c/</url>
      
        <content type="html"><![CDATA[<h1 id="Javascript要点"><a href="#Javascript要点" class="headerlink" title="Javascript要点"></a>Javascript要点</h1><h2 id="编写位置"><a href="#编写位置" class="headerlink" title="编写位置"></a>编写位置</h2><p>可以在html结构中直接写入onclick中，或者href中；也可以在外部写js文件，之后使用script标签中的src属性直接引入。但是要注意如果使用了这种方式编写script标签后，这个标签就不能用来写内部js代码了，想要再编写内部的js代码，可以再写一个script标签。</p><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><p>包括变量名、函数名、属性名等。</p><p>命名要求：可以含有字母、数字、下划线、$。但是不能以数字开头，不能是关键字和保留字。一般采用驼峰命名法。</p><h2 id="数据类型以及运算"><a href="#数据类型以及运算" class="headerlink" title="数据类型以及运算"></a>数据类型以及运算</h2><p>JS中包括的数据类型有：</p><ul><li>String</li><li>Number</li><li>BigInt（用n结尾）</li><li>Boolean</li><li>Null</li><li>Undefined</li><li>Symbol</li><li>Object</li></ul><p>前七个属于基本数据类型，也叫原始值。Object属于引用数据类型。</p><p>可以用typeof关键字来检查一个变量的类型。</p><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>将a变量转换为String：</p><ol><li>使用toString()方法，a.toString()。但是null和undefined没有该方法。</li><li>调用String()函数,String(a)。可以转换null和undefined。</li><li>将数据加上一个空字符串，也可以实现转化。</li></ol><p>将a变量转换为Number：</p><ol><li>使用Number函数，Number(a)。如果字符串中含有非数字内容，会转换为NaN；如果是空字符串，转换为0。布尔值转数字是对应的1和0，null是0，undefined是NaN。</li><li>parseInt()，用于将一个字符串转换为int，同理parseFloat转换为float。这个函数只将字符串开头的有效部分转化为字符串。如果对于非String类型，会先转化为String再操作。<br>parseInt函数中可以传递第二个参数，表示转化为几进制。</li><li>将变量减0，或者乘1，也可以实现转化。</li><li>在变量前加一个<code>+</code>，会将其转化为Number变量。甚至可以实现1++”2”来实现数字3。（这js真是及其不严谨）</li></ol><p>将a变量转换为Boolean：</p><ol><li>调用Boolean()函数。对于数字，除了0和NaN是false，其他是true；对于字符串，除了空字符串是false，其余是true；对于null和undefined，转换为false。对象也会转换为true。</li></ol><h3 id="相关的一些杂项"><a href="#相关的一些杂项" class="headerlink" title="相关的一些杂项"></a>相关的一些杂项</h3><ol><li>JS中的Number有最大值，可以使用Number.MAX_VALUE来看。如果超过了最大值，就会返回一个”Infinity”。也可以使用Infinity来给变量赋值。<br>也有0以上的最小正值，使用Number.MIN_VALUE来看。</li><li>NaN是一个特殊的数字，表示not a number，表示不是一个数字，但是这是一个number类型的关键字。</li><li>JS中整数的运算基本可以保证正确，但是浮点数的运算会失去精度。所以不能用js来进行精度要求高的运算。</li><li>Null类型的值就是null，用来表示一个空的对象。但是使用typeof检查会返回一个object。</li><li>Undefined类型的变量就一个是undefined，是声明一个变量但是不赋值。而且typeof检查返回的也是undefined。</li></ol><h3 id="运算相关"><a href="#运算相关" class="headerlink" title="运算相关"></a>运算相关</h3><ol><li>任何值和字符串相加都会先转化为字符串再拼接，如果是两个字符串用相加，会直接拼接字符串。<br>除了以上的相加情况以外，其他任何情况，当对非Number类型进行算数运算时，会先将其转化为Number值再计算，但是任何值和NaN计算都是NaN。</li><li>同理，在进行一些别的运算，例如逻辑运算的时候，如果不是布尔值，会首先进行数据类型转化。<br>不过逻辑运算实现断路运算，如果第一个值不符合条件，就不看第二个值，和java的双逻辑符一样。</li><li>与运算如果两个值都是true，会返回靠后面的值。如果有false，就返回靠前的false。<br>或运算相反。</li><li>比较运算的时候也会先转化为数字，并将比较结果返回为布尔值。但是字符串之间的比较是一位一位比较字典序。所以要注意如果想进行数字方面的比较要先转换。</li><li>a ** b是a的b次方。</li></ol><h3 id="相等判断"><a href="#相等判断" class="headerlink" title="相等判断"></a>相等判断</h3><h4 id=""><a href="#" class="headerlink" title="=="></a>==</h4><p>对于<code>==</code>，如果两者的数据类型不同，会先转换成相同的数据类型。大部分情况都是转化成数字再比较。</p><p>但是有特例，例如<code>null==0</code>，返回的是false；以及undefined是从null中衍生出来的，两者相等；NaN不和任何值相等，包括它本身。</p><p>所以判断一个值是否是NaN需要使用isNaN()函数。</p><p>当比较对象的时候，是比较是否是同一个对象。</p><h4 id="-1"><a href="#-1" class="headerlink" title="==="></a>===</h4><p>全等，判断是否全等，是不做类型转换的。</p><p>注意undefined和null不全等。</p><h2 id="对象相关"><a href="#对象相关" class="headerlink" title="对象相关"></a>对象相关</h2><p>创建对象：<code>var obj = new Object();</code>，或者使用常量创建：<code>var obj = &#123;&#125;;</code>，用第二种的时候可以在创建的时候就指定一些里面的值，用<code>,</code>隔开。</p><p>和python一样，增加属性的时候，可以使用<code>obj.name=...;</code>来添加，删除的时候是<code>delete obj.name</code>。</p><p>在使用一个特殊的属性名，例如想要使用<code>123</code>来作为属性名，需要使用<code>obj[&quot;123&quot;]</code>来操作属性。<code>[]</code>的运算优先级是最高一档的，可以在里面写表达式。</p><p>对象保存在堆中，在使用赋值运算符<code>=</code>的时候是地址拷贝。如果将变量值设置为null，只是断开了地址联系，不会影响原来对象的值。</p><p>访问一个对象中没有的属性的时候不会报错而是会返回undefined。</p><h3 id="in运算符"><a href="#in运算符" class="headerlink" title="in运算符"></a>in运算符</h3><p>可以用<code>&quot;dede&quot; in obj</code>来判断对象中是否存在dede这个属性。</p><p>无论属性在对象自身中还是在原型中，都会返回true。</p><p>如果只想检查是否在自身中，使用<code>Object.hanOwn(对象，属性)</code>。</p><h3 id="枚举对象语句"><a href="#枚举对象语句" class="headerlink" title="枚举对象语句"></a>枚举对象语句</h3><p><code>for(var 变量 in 对象)&#123;语句&#125;</code>。</p><p>这个变量是对象的属性，想要取出属性对应的值需要用<code>对象[属性名]</code>。</p><h3 id="对象存储结构"><a href="#对象存储结构" class="headerlink" title="对象存储结构"></a>对象存储结构</h3><p>对象存储的空间分为两部分：</p><ol><li>对象自身：<br>包括直接通过对象添加的属性，和在类中通过<code>x = y;</code>添加的属性。</li><li>原型对象(prototype)<br>对象中还有一些内容，会存储在原型对象中。<br>在对象中有一个属性指向其原型对象，即<code>__proto__</code>。<br>在访问对象属性的时候，会优先访问对象自身，如果没有，就会去原型对象中找。<br>会添加到原型对象中的情况：<ol><li>在类中通过<code>xxx()&#123;...&#125;</code>声明的方法，位于原型中。</li><li>主动向原型中添加的属性或方法。</li></ol></li></ol><h3 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h3><p>访问原型对象：<code>p.__proto__</code>和<code>Object.getPrototypeOf(p)</code>。都是访问p对象的原型对象。或者类的<code>prototype</code>属性。</p><p>内部数据：</p><ol><li>对象中的数据（属性、方法等）；</li><li>对象的构造函数。</li></ol><p>原型对象也有原型对象，构成了原型链。<br>有类的p对象—&gt; 原型—&gt;原型—&gt;null。<br>一个空的obj对象（也就是Object对象）—&gt;原型—&gt;null。</p><p>所有的同类型对象的原型都是同一个。那么同类型对象的原型链都是一样的。这样对于所有的同类对象，就只需要创建一个原型就行了。</p><p>js中的继承是用过原型实现的，子类的原型是父类的一个实例。</p><p>原型尽量不要去改，要改也是通过类的<code>prototype</code>属性赋值。</p><h3 id="复制对象"><a href="#复制对象" class="headerlink" title="复制对象"></a>复制对象</h3><h2 id="函数相关"><a href="#函数相关" class="headerlink" title="函数相关"></a>函数相关</h2><p>函数也是一个对象，所以也可以当作参数被传递。。</p><p>创建函数<code>var fun = new Function();</code>，但是基本不使用。一般使用的是<code>function fun(形参)&#123;语句... return...&#125;</code>，或者<code>const fun = function(形参)&#123;语句...return ...&#125;</code>，或者使用箭头函数<code>const fun = () =&gt; &#123;语句...&#125;</code>，箭头函数最常用。</p><p>如果没有return，就是返回一个undefined。</p><p>函数可以嵌套，return也可以返回一个函数。</p><p>调用函数除了使用fn()方式，也可以使用fn.call()以及fn.apply()。使用后两种方法可以指定函数中的this，如果不指定，函数中的this就是window对象，call和apply中的第一个参数，将会成为函数的this。</p><p>call调用，函数的实参直接在第一个参数后一个一个列出来；apply调用，函数的实参需要通过一个数组加在函数的第一个参数后面。</p><p>但是箭头函数没有自己的this，无法改变。</p><h3 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params">形参</span>)&#123;语句&#125;)(实参);</span><br></pre></td></tr></table></figure><p>函数也可以是对象的属性，这种函数被称为对象的方法。</p><p>这样可以避免变量冲突的问题。</p><h3 id="参数相关"><a href="#参数相关" class="headerlink" title="参数相关"></a>参数相关</h3><p>形参多于实参，多的形参会赋值为undefined；实参多于形参，多余的实参不使用。</p><p>形参可以指定默认值。</p><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>([参数]) =&gt; 返回值</p><ul><li>无参箭头函数:() =&gt; 返回值</li><li>一个参数的:a =&gt; 返回值</li><li>多个参数的:(a,b) =&gt; 返回值</li><li>只有一个语句的函数:() =&gt; 返回值</li><li>只返回一个对象的函数:() =&gt; ({…})</li><li>有多行语句的函数:() =&gt; {…}</li></ul><p>如果箭头函数只有一个语句，直接写返回值，可以直接写在箭头后面。其他还是return。</p><h3 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h3><p>在浏览器中，浏览器提供了一个window对象，可以直接访问。</p><p>window对象代表的是浏览器窗口，通过该对象可以对浏览器窗口进行操作。并且window对象还负责储存js中的内置对象和浏览器的宿主对象。</p><p>window对象的属性可以通过window对象访问，也可以直接访问，函数可以认为是window对象的方法。</p><p>在全局中使用var声明的变量，会作为window对象的属性，使用function声明的函数，会作为window对象的方法。<br>使用let声明的变量不会存储在window对象中。</p><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><p>函数的参数也可以是函数，如果将函数作为参数传递，我们就称这个函数为回调函数。</p><p>通常回调函数都是匿名函数。</p><h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><p>如果一个函数的参数或者返回值是函数，则这个函数就称为高阶函数。</p><p>将函数作为参数，就可以动态地向函数中传递代码。作为返回值，可以动态地生成函数。</p><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>可以利用函数，来隐藏不希望被外部访问的变量。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        num++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> fn = <span class="title function_">outer</span>();</span><br></pre></td></tr></table></figure><p>这样就实现了一个功能：fn是一个函数，每调用这个函数一次，num就自增1，并且这个num不是全局变量，不会被外部访问。</p><p>闭包是一个能够访问到外部函数作用域的函数。如上return的函数就是一个闭包。当我们需要隐藏一些内容的时候可以使用</p><p>闭包要素：1. 函数的嵌套；2. 内部函数需要引用外部函数的变量；3.内部函数要作为返回值返回。</p><p>闭包生命周期：闭包在外部函数调用的时候产生，每一次调用外部函数都会产生一个新的闭包；当内部函数丢失时销毁。</p><h3 id="arguments和可变参数"><a href="#arguments和可变参数" class="headerlink" title="arguments和可变参数"></a>arguments和可变参数</h3><p>arguments是函数中一个隐含参数，是一个类数组对象，可以通过索引访问，用来存储函数的实参，类似于argv。这样可以通过arguments对象直接访问实参。</p><p>只能使用forof语句遍历，但是由于不是数组，不能调用数组方法。</p><p>可以实现不受参数数量限制的函数。</p><p>箭头函数中没有arguments。</p><p>可变参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">...args</span>)&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是变长参数，将所有参数都存在args这个数组中，args名字自定义。并且这是一个数组，可以使用数组方法。</p><p>同样可以配合其他参数使用。</p><h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><p>是一个高阶函数，可以用来创建一个新的函数。</p><p>bind可以为新函数绑定this。传入一个参数，将这个参数作为新函数永久的this，不论以什么形式调用新函数，this永远是这个。</p><p>也可以用来绑定参数，如果在bind第一个参数后面再加参数，那么函数的对应位置的参数值绑定不变。</p><p>但是箭头函数没有自己的this，无法改变。</p><h2 id="类相关"><a href="#类相关" class="headerlink" title="类相关"></a>类相关</h2><p>定义：</p><p><code>class 类名&#123;...&#125;</code>或者<code>const 类名 = class&#123;...&#125;</code>。</p><p>和Java不同，如果使用static修饰属性成为静态属性，就只能通过类访问，无法通过实例访问。</p><p>构造方法使用<code>constructor(参数)&#123;...&#125;</code>。在内部使用的也是this.属性=…，那么相当于也是对对象添加属性，所以，如果不是私有属性，就可以省略属性在类中的声明。</p><h3 id="get和set方法"><a href="#get和set方法" class="headerlink" title="get和set方法"></a>get和set方法</h3><p>js提供的独特的get和set方法（依托答辩）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">P</span>&#123;</span><br><span class="line">    #name</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">name</span>()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.#name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">name</span>(<span class="params">name</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.#name = name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//get调用</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title function_">P</span>();</span><br><span class="line">p.<span class="property">name</span>;</span><br><span class="line"><span class="comment">//set调用</span></span><br><span class="line">p.<span class="property">name</span> = <span class="string">&quot;答辩&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>私有化是在属性前面加一个<code>#</code>，只能在类的内部访问，不能通过对象实例访问。私有属性必须在类中声明之后才能在构造函数中访问。</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>继承也是extands。继承中子类也是写同名方法来重写。重写构造函数第一行同样需要<code>super();</code>。调用父类方法也是<code>super.方法()</code>。</p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>遗憾的是，js中如果重载函数，方法名相同的情况下，后写的方法会直接覆盖前写的方法。js中多态指的概念是可以直接将对象当作参数，并不检验参数的类型。</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组中可以存储任意的数据类型，尽量一个数组中类型相同。</p><p><strong>创建</strong>：</p><p><code>const arr = new Array()</code>,或者<code>const arr = []</code>。</p><p><strong>添加元素</strong>：</p><p><code>数组[索引] = 值</code>。如果跳着赋值，中间会有空属性。</p><p>读取的时候如果读取不存在的元素会返回undefined。</p><p>有length属性判断长度。</p><p><strong>遍历</strong></p><p><code>for(let a of array)&#123;...&#125;</code>。这样遍历相当于增强for循环。</p><p>这个语句只要是可迭代对象都能遍历，例如字符串。</p><h3 id="一些方法"><a href="#一些方法" class="headerlink" title="一些方法"></a>一些方法</h3><p><code>Array.isArray()</code>，判断是否是数组。</p><p><code>at()</code>，可以根据索引获取数组中指定元素，可以给负值，代表从后往前。</p><p><code>concat()</code>，连接数组。<code>arr.concat(arr2,...)</code>，这是一种非破坏方法，不改变原数组的值，而是返回一个新数组。</p><p><code>indexOf()</code>，返回元素第一次出现的索引位置。可以多传一个值表示查询的起始位置。同样也有<code>lastIndexOf()</code>。没找到返回-1.</p><p><code>join()</code>，将数组中所有元素拼接成字符串，可以传入参数表示连接符，默认是<code>,</code>。</p><p><code>slice()</code>，截取数组。第一个参数是起始位置，第二个元素是结束位置（不包括结束的元素）。也是非破坏性方法。第二个参数省略会一直截取到最后。也可以传负值，也是倒数第几个。<br>如果什么参数都不传，就是实现了对数组的浅拷贝。</p><p><code>filter()</code>，过滤，将数组中满足条件的元素保存到一个新数组中返回。需要一个回调函数作为参数，如果回调函数返回true，就会放入新数组。这个回调函数有三个参数，第一个是数组元素，第二个是索引，第三个是当前被遍历的数组。</p><p><code>map()</code>，根据当前数组生成一个新数组。需要一个回调函数作为参数，回调函数的返回值会作为新数组的元素。这个回调函数有三个参数，第一个是数组元素，第二个是索引，第三个是当前被遍历的数组。</p><p><code>forEach()</code>，用来遍历数组。需要一个回调函数作为参数。数组中有几个元素，回调函数就会调用几次，每次调用都会将数组中的元素作为参数传递。这个回调函数有三个参数，第一个是数组元素，第二个是索引，第三个是当前被遍历的数组。</p><p><code>reduce()</code>，可以将数组中所有元素整合成一个值。需要一个回调函数作为参数，需要两个参数，例如<code>arr.reduce((a,b) =&gt; a+b);</code>就是从第一个元素开始，第一个元素是a，第二个是b，求一次a+b；然后将求和结果作为a，第三个元素作为b，依次类推。<br>还可以传入一个参数，将这个参数作为a的起始值。</p><h3 id="一些破坏性方法"><a href="#一些破坏性方法" class="headerlink" title="一些破坏性方法"></a>一些破坏性方法</h3><p><code>push()</code>，推进尾部一个元素。</p><p><code>pop()</code>，出栈一个元素。</p><p><code>unshift()</code>，向数组开头添加一个或多个元素，返回数组的长度。</p><p><code>shift()</code>，删除并返回数组的第一个元素。</p><p><code>splice()</code>，可以删除、插入、替换数组中的元素。<br>参数：1. 删除的起始位置。2.删除的起始位置。3.要插入的值<br>返回值是删除的元素。</p><p><code>reverse()</code>，翻转数组。</p><p><code>sort()</code>，默认按照字典序升序排列，即使是数字也会按字典序。sort参数中可以传递一个回调函数。例如<code>arr.sort((a,b) =&gt; a-b);</code>，达到升序排列目的。</p><h2 id="内建对象"><a href="#内建对象" class="headerlink" title="内建对象"></a>内建对象</h2><h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><p><strong>数组</strong></p><p>假如有三个变量，分别需要赋值为数组的每一个值，可以使用语法：<code>let [a,b,c] = arr</code>。</p><p>这种赋值方法直接覆盖，如果变量多与数组元素，多余的会成为undefined。可以在解构赋值的时候设置默认值。</p><p>同样可以使用扩展符<code>let [a,b,...c] = arr</code>，这时候c会成为一个数组，里面是除去a，b的多余元素。</p><p>可以通过<code>[a1,a2] = [a2,a1]</code>来快速交换变量的值。</p><p><strong>对象</strong></p><p>和数组类似，只需要<code>let &#123;a,b,c&#125; = obj</code>。</p><p>可以给变量赋别名：<code>let &#123;name:a,age:b,gender:c&#125; = obj</code>。这样之后可以操作abc来操作新变量。</p><h3 id="对象的序列化"><a href="#对象的序列化" class="headerlink" title="对象的序列化"></a>对象的序列化</h3><p>序列化指将对象转化为一个可以储存的格式，在JS中通常是将一个对象转换为一个JSON字符串。一般用于数据交换等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将对象转换为JSON</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="title class_">JSON</span>.<span class="title function_">stringfy</span>(obj);</span><br><span class="line"><span class="comment">//将JSON转换为对象</span></span><br><span class="line"><span class="keyword">const</span> obj1 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(str);</span><br></pre></td></tr></table></figure><p>由于新的obj1和旧的obj不是同一个对象，这样我们可以利用JSON实现对象的深拷贝。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj2 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj))</span><br></pre></td></tr></table></figure><p><strong>编写JSON字符串注意事项</strong></p><p>JSON有两种类型，对象和数组。注意JSON字符串中的属性名一定需要用双引号<code>&quot;&quot;</code>包住。</p><p>JSON中可以使用的属性值：</p><ul><li>数字（Number）</li><li>字符串（String）必须使用双引号</li><li>布尔值（Boolean）</li><li>空值（Null）</li><li>对象（Object {}）</li><li>数组（Array []）</li></ul><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>Map用于存储键值对结构的数据。</p><p>由于对象也可以认为是一种键值对结构，那么Map和对象的区别：对象中的属性名只能是字符串或者符号Symbol()，但Map可以用任何类型的值。</p><p>创建Map：<code>const map = new Map()</code>。</p><p>添加键值对：<code>map.set(&quot;name&quot;,&quot;yi&quot;);map.set(obj,&quot;ok&quot;)</code>。</p><p>取值：<code>map.get(&quot;name&quot;)</code>。</p><p>删除：<code>map.delete(&quot;name&quot;)</code>。</p><p>查询是否包含指定键：<code>map.has(&quot;name&quot;)</code>;</p><p>删除全部的键值对：<code>map.clear()</code>。</p><p>map的大小size是一个属性。</p><p>将Map转化为数组：<code>const arr = Array.from(map)</code>。创建好的数组是二维数组，键一个，值一个。或者用展开符<code>const arr = [...map]</code>。</p><p>遍历map：遍历的是键值对。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> entry <span class="keyword">of</span> map)&#123;</span><br><span class="line">    <span class="keyword">let</span> [key,vlaue] = entry;</span><br><span class="line">    key...value...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//或者使用map的forEach方法</span></span><br><span class="line">map.<span class="title function_">forEach</span>(<span class="function">(<span class="params">key,value</span>) =&gt;</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>获取map的所有key：<code>map.keys()</code>。返回值是一个对象。可以用for of遍历。</p><p>获取map的所有value：<code>map.values()</code>。返回值是一个对象。可以用for of遍历。</p><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>集合，和数组类似，都是有序数据，但是Set中数据不能重复。本质上就是一个Map，是一个键和值一样的Map。</p><p>创建：<code>const set = new Set()</code>;</p><p>添加数据：<code>set.add(10)</code>;</p><p>检查是否有该数据：<code>set.has(10)</code>；</p><p>将set转化为数组：<code>const arr = Array.from(set)</code>。或者用展开符<code>const arr = [...set]</code>。</p><p>遍历：<code>for(const item of set)&#123;...&#125;</code></p><p>可以利用set进行数组去重：<code>const set = new Set(arr);const arr2 = [...set]</code>。</p><p>删除：<code>set.delete(&quot;name&quot;)</code>。</p><h3 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h3><p>Math是一个工具类，其中为我们提供了数学运算相关的一些常量和方法。</p><ul><li><p>常量： Math.PI 圆周率</p></li><li><p>方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">abs</span>() <span class="comment">//求一个数的绝对值</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">min</span>() <span class="comment">//求多个值中的最小值</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">max</span>() <span class="comment">//求多个值中的最大值</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">pow</span>() <span class="comment">//求x的y次幂，也可以使用x ** y</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">sqrt</span>() <span class="comment">//求一个数的平方根</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>() <span class="comment">//向下取整</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">ceil</span>() <span class="comment">//向上取整</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">round</span>() <span class="comment">//四舍五入取整</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">trunc</span>() <span class="comment">//直接去除小数位</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">random</span>() <span class="comment">//生成一个0-1之间的随机数</span></span><br></pre></td></tr></table></figure></li></ul><p>更多见<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math">官网</a>。</p><h3 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h3><p>js中所有和时间相关的数据都由Date对象来表示。</p><p>创建：<code>let d = new Date()</code>，这样创建的时候是网页创建当前时间。创建指定时间可以<code>let d = new Date(&quot;月/日/年 时:分:秒&quot;)</code>或者<code>let d = new Date(&quot;年-月-日T时:分:秒&quot;)</code>或者<code>let d = new Date(年,月,日,时,分,秒)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getFullYear</span>() <span class="comment">//获取4位年份</span></span><br><span class="line"><span class="title function_">getMonth</span>() <span class="comment">//返当前日期的月份（0-11）</span></span><br><span class="line"><span class="title function_">getDate</span>() <span class="comment">//返回当前是几日</span></span><br><span class="line"><span class="title function_">getDay</span>() <span class="comment">//返回当前日期是周几（0-6） 0表示周日</span></span><br><span class="line"><span class="title function_">getTime</span>() <span class="comment">//返回当前日期对象的时间戳</span></span><br><span class="line"><span class="comment">/*时间戳：自1970年1月1日0时0分0秒到当前时间所经历的毫秒数,</span></span><br><span class="line"><span class="comment">计算机底层存储时间时，使用都是时间戳*/</span></span><br><span class="line"><span class="title class_">Date</span>.<span class="title function_">now</span>() <span class="comment">//获取当前的时间戳</span></span><br></pre></td></tr></table></figure><h4 id="日期格式化"><a href="#日期格式化" class="headerlink" title="日期格式化"></a>日期格式化</h4><ul><li>d.toLocaleDateString()//将日期转化为符合语言的格式</li><li>d.toLocaleTimeString()//将时间转化为符合语言的格式</li><li>d.toLocaleString()//日期时间都转</li></ul><p>这三个方法的参数第一个都是国家语言，例如<code>&quot;zh-CN&quot;</code>，第二个参数是一个对象，来对日期呈现的格式进行配置。具体见<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString">官网</a>中的option部分。</p><p>一般的option：</p><ul><li>方式1：dateStyle 日期的风格，timeStyle 时间的风格：<ul><li>可选值<ul><li>full</li><li>long</li><li>medium</li><li>short</li></ul></li></ul></li><li>方式2：{year,month,day,weekday,hour,minute,second}给各属性赋值<ul><li>weekday 星期的显示方式：long，short，narrow</li><li>hour12 是否采用12小时值：true，false</li><li>不写就不显示</li></ul></li></ul><h3 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h3><p>也就是原始值对应的类，但是不要通过引用这些类来创建对象。</p><p>但是可以直接通过原始值来调用包装类中的方法。</p><h3 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h3><ul><li>字符串其本质就是一个字符数组</li><li>“hello” —&gt; [“h”, “e”, “l”, “l”, “o”]</li><li>字符串的很多方法都和数组是非常类似的</li></ul><p><strong>属性和方法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">length</span><br><span class="line">    - 获取字符串的长度</span><br><span class="line">str[索引]</span><br><span class="line">    -获取指定位置的字符</span><br><span class="line">str.<span class="title function_">at</span>()</span><br><span class="line">    - 根据索引获取字符，可以接受负索引</span><br><span class="line">str.<span class="title function_">charAt</span>()</span><br><span class="line">    - 根据索引获取字符</span><br><span class="line">str.<span class="title function_">concat</span>(<span class="string">&quot;str1&quot;</span>)</span><br><span class="line">    - 用来连接两个或多个字符串，非破坏性，生成新字符串。</span><br><span class="line">str.<span class="title function_">includes</span>()</span><br><span class="line">    - 用来检查字符串中是否包含某个内容，有返回<span class="literal">true</span>，没有返回<span class="literal">false</span></span><br><span class="line">str.<span class="title function_">indexOf</span>()</span><br><span class="line">str.<span class="title function_">lastIndexOf</span>()</span><br><span class="line">    - 查询字符串中是否包含某个内容,根据内容返回索引</span><br><span class="line">str.<span class="title function_">startsWith</span>()</span><br><span class="line">    - 检查一个字符串是否以指定内容开头</span><br><span class="line">str.<span class="title function_">endsWith</span>()</span><br><span class="line">    - 检查一个字符串是否以指定内容结尾</span><br><span class="line">str.<span class="title function_">padStart</span>(<span class="number">7</span>,<span class="number">0</span>)</span><br><span class="line">str.<span class="title function_">padEnd</span>(<span class="number">7</span>,<span class="number">0</span>)</span><br><span class="line">    - 通过添加指定的内容，使字符串保持某个长度，第一个参数是长度，第二个是补位的字符</span><br><span class="line">str.<span class="title function_">replace</span>(str1,str2)</span><br><span class="line">    - 使用str2替换str中的第一个str1</span><br><span class="line">str.<span class="title function_">replaceAll</span>()</span><br><span class="line">    - 使用一个新字符串替换所有指定内容</span><br><span class="line">str.<span class="title function_">slice</span>(起始位置（包括）,结束位置（不包括）)</span><br><span class="line">    - 对字符串进行切片</span><br><span class="line">str.<span class="title function_">substring</span>(起始位置（包括）,结束位置（不包括）)</span><br><span class="line">    - 截取字符串</span><br><span class="line">str.<span class="title function_">split</span>(<span class="string">&quot;截取标识字符&quot;</span>)</span><br><span class="line">    - 用来将一个字符串拆分为一个数组</span><br><span class="line">str.<span class="title function_">toLowerCase</span>()</span><br><span class="line">    - 将字符串转换为小写</span><br><span class="line">str.<span class="title function_">toUpperCase</span>()</span><br><span class="line">    - 将字符串转换为大写</span><br><span class="line">str.<span class="title function_">trim</span>()</span><br><span class="line">    - 去除前后空格</span><br><span class="line">str.<span class="title function_">trimStart</span>()</span><br><span class="line">    - 去除开始空格</span><br><span class="line">str.<span class="title function_">trimEnd</span>()</span><br><span class="line">    - 去除结束空格</span><br></pre></td></tr></table></figure><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>正则表达式也是一个对象，需要创建。</p><p>可以通过构造函数：<code>let reg = new RegExp(pattern,Exp)</code>，第一个参数是一个正则表达式，第二个是一个标识，标识匹配模式是什么。</p><p>可以通过常量：<code>let reg = /a/i</code>，格式是：/正则/匹配模式，匹配模式可以省略。这种方式不需要写转义字符。</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">1.在正则表达式中大部分字符都可以直接写</span><br><span class="line">2.| 在正则表达式中表示或</span><br><span class="line">3.[] 表示或（字符集）</span><br><span class="line">  [a-z] 任意的小写字母</span><br><span class="line">  [A-Z] 任意的大写字母</span><br><span class="line">  [a-zA-Z] 任意的字母</span><br><span class="line">  [0-9]任意数字</span><br><span class="line">4.[^] 表示除了</span><br><span class="line">  [^x] 除了x  只要匹配到除了x的所有字符都会返回ture</span><br><span class="line">5. . 表示除了换行外的任意字符</span><br><span class="line">6. 在正则表达式中使用\作为转义字符</span><br><span class="line">7. 其他的字符集</span><br><span class="line">   \w 任意的单词字符 [A-Za-z0-9_]</span><br><span class="line">   \W 除了单词字符 [^A-Za-z0-9_]</span><br><span class="line">   \d 任意数字 [0-9]</span><br><span class="line">   \D 除了数字 [^0-9]</span><br><span class="line">   \s 空格</span><br><span class="line">   \S 除了空格</span><br><span class="line">   \b 单词边界</span><br><span class="line">   \B 除了单词边界</span><br><span class="line">8. 开头和结尾</span><br><span class="line">   ^ 表示字符串的开头 </span><br><span class="line">   $ 表示字符串的结尾 </span><br><span class="line">   ^X$ 完全匹配，要求字符串和正则表达式完全匹配</span><br><span class="line">9.量词 只匹配前一个字符，要匹配多个字符（……）&#123;量词&#125;</span><br><span class="line">   &#123;m&#125; 正好m个</span><br><span class="line">   &#123;m,&#125; 至少m个</span><br><span class="line">   &#123;m,n&#125; m到n个</span><br><span class="line">    + 一个以上，相当于&#123;1,&#125;</span><br><span class="line">    * 任意数量</span><br><span class="line">    ? 0-1次 &#123;0,1&#125;</span><br><span class="line">10.匹配模式</span><br><span class="line">   i忽略大小写</span><br><span class="line">   g全局模式匹配</span><br></pre></td></tr></table></figure><ul><li>正则表达式.test(#字符串)检查字符串是否符合，返回ture/false</li><li>正则表达式.exec(#字符串) 获取字符串中符合正则表达式的内容，返回数组（可以通过在正则表达式里加括号的方式进行分组）<ul><li>不开全局模式此方法只会匹配第一个</li><li>开了之后调一次匹配一个，下次调用从上次匹配的结尾开始</li><li>同时可以使用括号在正则中对字母进行分组，括号中的内容为一组，每一次exec都会获取所有组中的内容。</li></ul></li></ul><h4 id="字符串中的正则方法"><a href="#字符串中的正则方法" class="headerlink" title="字符串中的正则方法"></a>字符串中的正则方法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">split()</span><br><span class="line">    - 可以根据正则表达式来对一个字符串进行拆分</span><br><span class="line">search()</span><br><span class="line">    - 可以去搜索符合正则表达式的内容第一次在字符串中出现的位置</span><br><span class="line">replace()</span><br><span class="line">    - 根据正则表达式替换字符串中的指定内容</span><br><span class="line">match()</span><br><span class="line">    - 根据正则表达式去匹配字符串中符合要求的内容</span><br><span class="line">    - 返回字符串数组</span><br><span class="line">matchAll()</span><br><span class="line">    - 根据正则表达式去匹配字符串中符合要求的内容(必须设置g 全局匹配)</span><br><span class="line">    - 它返回的是一个迭代器，只需要对其进行遍历即可</span><br></pre></td></tr></table></figure><h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><p>Document Object Model</p><p>文档对象模型，通过DOM可以来任意来修改网页中各个内容，DOM把JS与网页联系起来。文档指的是网页，一个网页就是一个文档；对象指将网页中的每一个节点都转换为对象， 转换完对象以后，就可以以一种纯面向对象的形式来操作网页了；模型用来表示节点和节点之间的关系，方便操作页面。</p><p>节点（Node） 节点是构成网页的最基本的单元，网页中的每一个部分都可以称为是一个节点。虽然都是节点，但是节点的类型却是不同的。Node对象是所有DOM对象的祖先。</p><h4 id="文档节点"><a href="#文档节点" class="headerlink" title="文档节点"></a>文档节点</h4><p>浏览器已经为我们提供了一个document对象，表示整个网页，通过这个对象来操作整个网页。</p><p>原型链：HTMLDocument -&gt; Document -&gt; Node -&gt; EventTarget -&gt; Object.prototype -&gt; null</p><p>部分属性：</p><ul><li>document.documentElement —&gt; html根元素</li><li>document.head —&gt; head元素</li><li>document.title —&gt; title元素</li><li>document.body —&gt; body元素</li><li>document.links —&gt; 获取页面中所有的超链接</li></ul><h4 id="元素节点"><a href="#元素节点" class="headerlink" title="元素节点"></a>元素节点</h4><p>代表的是每一个标签。每一个标签都是一个元素节点。</p><p>获取元素节点：</p><ol><li>document.getElementById()<ul><li>根据id获取一个元素节点对象</li></ul></li><li>document.getElementsByClassName()<ul><li>根据元素的class属性值获取一组元素节点对象</li><li>返回的是一个类数组对象</li><li>该方法返回的结果是一个实时更新的集合，当网页中新添加元素时，集合也会实时的刷新</li></ul></li><li>document.getElementsByTagName()<ul><li>根据标签名获取一组元素节点对象</li><li>返回的结果是可以实时更新的集合</li><li>document.getElementsByTagName(“*”) 获取页面中所有的元素</li></ul></li><li>document.getElementsByName()<ul><li>根据name属性获取一组元素节点对象</li><li>返回一个实时更新的集合</li><li>主要用于表单项</li></ul></li><li>document.querySelectorAll()<ul><li>根据选择器去页面中查询元素</li><li>会返回一个类数组（不会实时更新）</li><li>不会实时更新元素节点的改变，但属性节点和文本节点的改变会更新</li></ul></li><li>document.querySelector()<ul><li>根据选择器去页面中查询第一个符合条件的元素</li></ul></li></ol><p>通过document对象来创建元素节点：<code>document.createElement(&quot;标签名&quot;)</code>根据标签名创建一个元素节点对象。</p><h5 id="属性和方法"><a href="#属性和方法" class="headerlink" title="属性和方法"></a>属性和方法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过元素节点对象获取其他节点的方法</span></span><br><span class="line">element.<span class="title function_">getElementsByTagName</span>()</span><br><span class="line">element.<span class="property">childNodes</span><span class="comment">//获取当前元素的子节点（会包含空白的子节点）</span></span><br><span class="line">element.<span class="property">children</span><span class="comment">//获取当前元素的子元素</span></span><br><span class="line">element.<span class="property">firstElementChild</span><span class="comment">//获取当前元素的第一个子元素</span></span><br><span class="line">element.<span class="property">lastElementChild</span><span class="comment">//获取当前元素的最后一个子元素</span></span><br><span class="line">element.<span class="property">nextElementSibling</span><span class="comment">//获取当前元素的下一个兄弟元素</span></span><br><span class="line">element.<span class="property">previousElementSibling</span><span class="comment">//获取当前元素的前一个兄弟元素</span></span><br><span class="line">element.<span class="property">parentNode</span><span class="comment">//获取当前元素的父节点</span></span><br><span class="line">element.<span class="property">tagName</span><span class="comment">//获取当前元素的标签名</span></span><br></pre></td></tr></table></figure><h4 id="文本节点"><a href="#文本节点" class="headerlink" title="文本节点"></a>文本节点</h4><p>一般不直接获取文本对象，而是通过元素来修改其中的文本。</p><p>三个属性：</p><p>element.textContent，读取或者修改元素中的文本内容；不会考虑css样式；</p><p>element.innerText，读取或者修改元素中的文本内容；会考虑css样式，所以会触发网页计算css样式，性能比textcontent差；</p><p>element.innerHTML，读取或者修改元素中的标签；但是使用有xss注入风险。</p><h4 id="属性节点"><a href="#属性节点" class="headerlink" title="属性节点"></a>属性节点</h4><p>属性就是标签中添加的属性。</p><p>操作方法：</p><ul><li>方式一：<ul><li>读取：元素.属性名<ul><li>注意：class属性的属性名是className</li><li>读取一个布尔值时，会返回true或false</li></ul></li><li>修改：元素.属性名 = 属性值</li></ul></li><li>方式二：<ul><li>读取：元素.getAttribute(属性名)</li><li>修改：元素.setAttribute(属性名, 属性值)</li><li>删除：元素.removeAttribute(属性名)</li></ul></li></ul><h4 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h4><ul><li>事件就是用户和页面之间发生的交互行为 比如：点击按钮、鼠标移动、双击按钮、敲击键盘、松开按键…</li><li>可以通过为事件绑定响应函数（回调函数），来完成和用户之间的交互</li><li>绑定响应函数的方式：<ul><li>1.可以直接在元素的属性中设置</li><li>2.可以通过为元素的指定属性设置回调函数的形式来绑定事件（一个事件只能绑定一个响应函数），例如<code>btn.onclick = function()&#123;...&#125;</code></li><li>3.可以通过元素<code>addEventListener(&quot;click&quot;,function(&#123;&#125;))</code>方法来绑定事件<ul><li>添加事件监听器，一个事件能绑定多个响应函数</li></ul></li></ul></li><li>在事件的响应函数中，响应函数绑定给谁 this就是谁（箭头函数除外）</li><li>采用addEventListener()绑定的事件可以解绑，使用<code>removeEventListener(参数与绑定方法一致)</code></li></ul><h4 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h4><p>事件对象是有浏览器在事件触发的时候创建的对象，其中包含了事件的各种具体信息。可以获取到鼠标坐标、键盘按键等等。</p><p>浏览器在创建事件对象之后，会将其作为一个参数传递到相应函数的参数中。可以<code>box1.onmousemove = event =&gt; &#123;...&#125;</code>或者<code>box1.addEventListener(&quot;mousemove&quot;,function(event)&#123;...&#125;)</code>这个event就是事件对象。</p><p>事件对象也是有分类以及相互之间的继承的，具体可以看mdn。所有的事件对象的共同祖先都是Event。</p><p><code>event.x</code>鼠标的x坐标。</p><h5 id="触发事件对象"><a href="#触发事件对象" class="headerlink" title="触发事件对象"></a>触发事件对象</h5><p><code>event.target</code>，触发事件的对象。但是触发事件的对象并不一定是绑定事件的对象。如果使用this，就一定是绑定事件的对象，同时<code>event.currentTarget</code>和this一样，也是绑定事件的对象。</p><h5 id="事件触发阶段"><a href="#事件触发阶段" class="headerlink" title="事件触发阶段"></a>事件触发阶段</h5><p>事件触发的顺序：</p><ol><li>捕获阶段</li><li>目标阶段</li><li>冒泡阶段</li></ol><p>可以通过<code>event.eventPhase</code>查看事件的阶段。值为1是捕获阶段，2是目标阶段，3是捕获阶段。不过没啥用。</p><h5 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h5><p>事件冒泡就是事件的向上传递，当元素的某个事件触发后，其祖先元素上的相同事件也会同时触发。</p><p>有时候不想要事件冒泡，可以通过事件对象来取消冒泡：在相应的事件响应函数中使用<code>event.stopPropagation()</code>，可以停止事件传递。</p><h5 id="取消事件默认行为"><a href="#取消事件默认行为" class="headerlink" title="取消事件默认行为"></a>取消事件默认行为</h5><p>在事件响应函数中使用<code>event.preventDefault()</code>，可以取消默认行为，例如超链接的跳转。</p><h5 id="事件的委派"><a href="#事件的委派" class="headerlink" title="事件的委派"></a>事件的委派</h5><p>有时候我们会有需求，例如添加新的元素，但是有可能会出现新的元素没有之前的同种元素绑定的事件。这时候可以使用事件的委派。也就是将事件绑定给父元素乃至祖先元素。我们一般会直接绑定给document整个网页。</p><p>但是直接给document绑定事件，会导致点击本来不是事件目标的元素也会有相应的响应，解决方案是在响应函数中首先对<code>event.target</code>进行判断，如果在想要的目标中，响应函数的相关部分就执行。</p><h5 id="事件的捕获"><a href="#事件的捕获" class="headerlink" title="事件的捕获"></a>事件的捕获</h5><p>事件的捕获指事件从外向内的传导，当前元素触发事件后，会从事件最大的祖先元素从外向内进行事件的捕获。捕获在捕获到目标元素后结束，然后进行事件的冒泡。像是一个事件栈。</p><p>如果希望在捕获阶段就触发事件，可以在addEventListener方法中添加第三个参数true，实现在捕获阶段触发。</p><h4 id="修改dom"><a href="#修改dom" class="headerlink" title="修改dom"></a>修改dom</h4><ul><li><p>增</p><ul><li><p>appendChild() 用于给一个节点添加子节点</p></li><li><p>insertAdjacentElement()可以向元素的任意位置添加元素 <code>&lt;br/&gt;</code> 两个参数：</p><p>要添加的位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">beforeend 标签的最后</span><br><span class="line">afterbegin 标签的开始</span><br><span class="line">beforebegin 在元素的前边插入元素（兄弟元素）</span><br><span class="line">afterend 在元素的后边插入元素（兄弟元素）</span><br></pre></td></tr></table></figure><p>要添加的元素对象</p></li><li><p>insertAdjacentHTML(“要添加的位置”, “html代码”);</p></li></ul></li><li><p>删</p><ul><li>元素.remove()</li></ul></li><li><p>改</p><ul><li>被替换元素.replaceWith(替换元素)</li></ul></li></ul><p><strong>事件中可以通过取消默认行为来阻止超链接的跳转，在事件绑定函数中return false来取消默认行为，只在 xxx.xxx = function(){}这种形式绑定的事件中才适用</strong></p><h4 id="节点复制"><a href="#节点复制" class="headerlink" title="节点复制"></a>节点复制</h4><p>节点对象的cloneNode()方法。当时这个方法复制节点时会复制节点的所有特点。包括各种属性，但是只会复制节点，不会复制子节点。</p><p>如果要同时复制节点中的文字，或者是同时复制其中的子节点，只需要传入一个参数为<code>true</code>。</p><h4 id="CSS样式调整"><a href="#CSS样式调整" class="headerlink" title="CSS样式调整"></a>CSS样式调整</h4><h5 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h5><p><strong>直接修改</strong></p><p>元素.style.样式名 = 样式值。例如<code>box1.style.width = &quot;200px&quot;</code>。这种修改相当于增加了一个内联样式，优先级等同于内联样式。</p><p>注意如果样式名中有<code>-</code>，需要将其修改为小驼峰命名。</p><p><strong>通过class修改</strong></p><p>可以通过给元素节点的className属性添加一个新的类或者直接修改其值，来达到修改css的目的。但是不建议使用，建议用list</p><p>例如<code>box1.className += &quot; box2&quot;</code>。</p><p>通过<code>元素.classList</code>来修改，这是一个对象，对象中包括了当前元素的类的各种操作方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">box1.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;box2&quot;</span>);</span><br><span class="line">box1.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;box2&quot;</span>);</span><br><span class="line">box1.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&quot;box2&quot;</span>);<span class="comment">//切换，如果有就修改没，如果没就修改有，可以用于多次切换。但是一次只能操作一个class</span></span><br><span class="line">box1.<span class="property">classList</span>.<span class="title function_">replace</span>(<span class="string">&quot;box1&quot;</span>,<span class="string">&quot;box2&quot;</span>);<span class="comment">//替换</span></span><br><span class="line">box1.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&quot;box2&quot;</span>);<span class="comment">//检查是否包含</span></span><br></pre></td></tr></table></figure><h5 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h5><p><strong>方法</strong></p><p><code>getComputedStyle()</code>，直接用即可，不是哪个对象的方法，得到当前节点对象生效的所有样式对象。可以通过返回的对象.属性名，来读取相应样式。</p><p>其参数第一个是要获取样式的节点对象，第二个是伪元素（如果需要）。</p><p>读取的样式值有可能会是auto，但是也有可能不是，需要验证之后再进行运算。</p><p><strong>属性</strong></p><p>通过属性获得的值会自动去掉单位。一般都是只读的。</p><p>元素.clientHeight、元素.clientWidth：获取元素的宽高，包括内容区和内边距；</p><p>元素.offsetHeight、元素.offsetWidth：获取元素的宽高，包括内容区和内边距和边框；</p><p>元素.scrollHeight、元素.scrollWidth：获取元素滚动区域的宽高；</p><p>元素.offsetParent，获取元素的定位父元素。也就是里当前元素的最近的开启了定位的祖先元素。</p><p>元素.offsetLeft、元素.offsetTop，获取元素相对于定位父元素的偏移量。</p><p>元素.scrollLeft、元素.scrollTop，获取元素滚动条已经滚动的偏移量。这个值可以被设置、修改。</p><h3 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h3><p>浏览器对象模型。它为我们提供了一组对象，可以实现对浏览器的各种操作。</p><ul><li>Window：代表浏览器窗口</li><li>Navigator：浏览器的对象，可以操作浏览器</li><li>Location：浏览器的地址栏信息</li><li>History：浏览器历史记录，只能读取用户访问了几个网页，用来控制浏览器前进后退。</li><li>Screen：屏幕的信息。</li></ul><p>BOM对象都是作为window对象的属性保存的，所以可以直接访问，不需要先获取对象。</p><h4 id="Navigator"><a href="#Navigator" class="headerlink" title="Navigator"></a>Navigator</h4><p>比较常用的<code>Navigator.userAgent()</code>，返回一个用来描述浏览器信息的字符串。</p><p>其他用的时候看mdn。</p><h4 id="Location"><a href="#Location" class="headerlink" title="Location"></a>Location</h4><p>location.href获取地址信息。</p><p><code>location.assign(&quot;一个地址&quot;)</code>，跳转到新地址。</p><p><code>location.replace(&quot;一个地址&quot;)</code>，跳转到新地址，无法通过回退按钮回退，因为替换不会产生历史。</p><p><code>location.reload()</code>，刷新页面。传入参数true，可以强制清除缓存。</p><h4 id="History"><a href="#History" class="headerlink" title="History"></a>History</h4><p><code>history.back()</code>，回退。</p><p><code>history.forward()</code>，前进。</p><p><code>history.go()</code>，传入正值，传几就前进几，负值就是后退几。</p><h2 id="其他杂项"><a href="#其他杂项" class="headerlink" title="其他杂项"></a>其他杂项</h2><h3 id="unicode编码"><a href="#unicode编码" class="headerlink" title="unicode编码"></a>unicode编码</h3><p>html中编码前面加<code>&amp;#</code>,js中前面加<code>\u</code>。</p><h3 id="switch小技巧"><a href="#switch小技巧" class="headerlink" title="switch小技巧"></a>switch小技巧</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">case</span> a &gt; <span class="number">1</span>:</span><br><span class="line">        ....</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">        ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h3><p>在想要开启严格模式的作用域开头写<code>&quot;use strict&quot;</code>。能提升代码运行的性能。</p><p>类自带严格模式。</p><h3 id="声明提升"><a href="#声明提升" class="headerlink" title="声明提升"></a>声明提升</h3><p>使用var声明的变量，是在所有代码执行之前声明，但不会赋值。在声明前也可以访问。如果不使用var，就不会被提前声明。</p><p>使用function关键字声明的函数，会在所有代码执行之前声明，可以被任意调用，但是使用var声明的函数不会被提前创建。</p><p>let声明的变量也会提升，但是在赋值前禁止访问。</p><h4 id="let和var和const"><a href="#let和var和const" class="headerlink" title="let和var和const"></a>let和var和const</h4><p>var声明的变量没有块作用域，在代码块外面访问一个在代码块内声明的变量也能访问到。最好用let。但是有函数作用域，在函数外部访问不到函数内部var声明的变量。</p><p>const是常量，只能被赋值一次，一些不希望被改变的对象可以声明为只读。但是对象的属性可以被修改。</p><p>要注意如果在局部变量中没有用var或者let声明变量，直接写一个<code>a=10;</code>，就会成为全局变量。相当于写<code>window.a=10</code>。</p><h4 id="debug断点"><a href="#debug断点" class="headerlink" title="debug断点"></a>debug断点</h4><p>代码中写一行debugger。</p><h3 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h3><p>在函数中调用，this指向的是window。通过对象调用，以方法的形式调用，this指向的是对象。</p><p>箭头函数没有自己的this，和他的调用方式无关，只和其外层作用域有关。外层是谁，this就是谁。</p><h3 id="浅拷贝和深拷贝"><a href="#浅拷贝和深拷贝" class="headerlink" title="浅拷贝和深拷贝"></a>浅拷贝和深拷贝</h3><h4 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h4><p>通常对对象的拷贝都是浅拷贝，浅拷贝就是只拷贝一层。如果对象中只有原始值，那拷贝的深浅不重要。<br>浅拷贝只会对对象本身进行复制，不会复制对象中的属性或元素。也就是如果对象中还有对象，对第一层对象进行复制，就只是会多出来一个第一层对象，这个多出来的第一层对象中包含的那个对象还是原来的那个。</p><p>那么如果修改浅拷贝的对象中包含的对象，则其他的也会收到影响。</p><p><strong>浅拷贝方式</strong></p><ol><li>数组的slice()方法。</li><li>使用<code>...</code>展开运算符。可以将一个数组中的元素展开到另一个数组中或者作为函数的参数传递。<code>const arr2 = [...arr]</code>，同时可以进行添加元素。<br>同理可以对对象使用该运算符。<code>const obj2 = &#123;...obj&#125;</code>。但是在添加属性的时候，添加在展开运算符后面的属性会覆盖展开中的内容。</li><li>使用Object中的assign方法。<code>const obj2 = Object.assign(&#123;&#125;,obj)</code>。就是将obj对象中的属性复制给<code>&#123;&#125;</code>新对象。</li></ol><h4 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h4><p>不止复制对象本身，还会复制对象的属性和元素。</p><p><strong>深拷贝方法</strong>：structureClone()。直接写<code>const arr2 = structureClone(arr)</code>。</p><p>const obj2 = JSON.parse(JSON.stringify(obj))</p><h3 id="解决xss注入"><a href="#解决xss注入" class="headerlink" title="解决xss注入"></a>解决xss注入</h3><p>手动创建元素节点及其内容，之后获取要添加的元素对象，手动添加。</p><h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><p>设置方式：</p><ol><li><code>setTimeout()</code>，参数第一个是回调函数，就是要执行的函数，第二个是指定的时间，单位是毫秒。有一个返回值，作为定时器的编号。<code>clearTimeout()</code>，传入对应计时器的编号，可以关闭响应的计时器。</li><li><code>setInterval()</code>，参数一样，但是这个是无限循环，每间隔一段时间就会执行。可以利用这一点来控制多次执行。在执行次数达到目标的时候<code>clearInterval()</code>。</li></ol><p>定时器的本质是在指定时间之后将函数插入到消息队列中。setInterval也是每隔一定时间就将回调函数入队，那么如果 回调函数执行时间过长，会导致无法确保时间间隔相等。所以一般不会直接使用setInterval。可以使用setTimeout模拟：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//在最后</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(fn,<span class="number">3000</span>);</span><br><span class="line">&#125;,<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3><p>消息队列负责存放将要执行的函数。</p><p>当事件触发的时候，并不是立刻将响应函数推到函数栈中，而是先进消息队列。在函数栈空后才会执行。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML要点</title>
      <link href="/Blog/posts/375ae22a/"/>
      <url>/Blog/posts/375ae22a/</url>
      
        <content type="html"><![CDATA[<h1 id="html要点"><a href="#html要点" class="headerlink" title="html要点"></a>html要点</h1><h2 id="元素间关系"><a href="#元素间关系" class="headerlink" title="元素间关系"></a>元素间关系</h2><h3 id="父元素"><a href="#父元素" class="headerlink" title="父元素"></a>父元素</h3><p>直接包裹某个元素的元素，就是该元素的父元素。</p><h3 id="子元素"><a href="#子元素" class="headerlink" title="子元素"></a>子元素</h3><p>被父元素直接包含的元素。</p><h3 id="祖先元素"><a href="#祖先元素" class="headerlink" title="祖先元素"></a>祖先元素</h3><p>父元素的父元素的……，这些都是祖先元素。</p><p>父元素也算是祖先元素的一种。</p><h3 id="后代元素"><a href="#后代元素" class="headerlink" title="后代元素"></a>后代元素</h3><p>子元素的子元素……，这些都是后代元素。</p><p>同理子元素也算后代元素的一种。</p><h3 id="兄弟元素"><a href="#兄弟元素" class="headerlink" title="兄弟元素"></a>兄弟元素</h3><p>具有相同父元素的元素互为兄弟元素。</p><h2 id="元素显示方式"><a href="#元素显示方式" class="headerlink" title="元素显示方式"></a>元素显示方式</h2><div class="table-container"><table><thead><tr><th></th><th>块级元素</th><th>行内元素（内联）</th><th>行内块元素（内联块元素）</th></tr></thead><tbody><tr><td>是否独占一行</td><td>是，从上到下排列</td><td>否，从左到右排列，会换行</td><td>否，从左到右排列，会换行</td></tr><tr><td>默认宽度</td><td>撑满父元素</td><td>由内容撑开</td><td>由内容撑开</td></tr><tr><td>默认高度</td><td>由内容撑开</td><td>由内容撑开</td><td>由内容撑开</td></tr><tr><td>css设置宽高</td><td>可以</td><td>不可以</td><td>可以</td></tr><tr><td>举例</td><td>html,body, h1,hr,p,div, ul,ol,li, table,tbody,thead, tr,caption, form,option</td><td>br, em,strong,span, a,label</td><td>img, td,th, input,textarea, select,button, iframe</td></tr></tbody></table></div><h2 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h2><h3 id="排版布局标签"><a href="#排版布局标签" class="headerlink" title="排版布局标签"></a>排版布局标签</h3><p>包括h1-h6（标题）、p标签（段落）。</p><p>h1-h6不能相互嵌套。</p><p>p标签内部不能嵌套标题标签或者是div，不能嵌套块元素。</p><p>H5新增：</p><div class="table-container"><table><thead><tr><th>标签</th><th>语义</th></tr></thead><tbody><tr><td>header</td><td>整个页面或者部分区域的头部</td></tr><tr><td>footer</td><td>整个页面或者部分区域的底部</td></tr><tr><td>nav</td><td>导航</td></tr><tr><td>article</td><td>文章、帖子、杂志、评论等</td></tr><tr><td>section</td><td>页面中的某段文字，或文章中的某段文字（文字中通常包含标题）</td></tr><tr><td>aside</td><td>侧边栏</td></tr><tr><td>main</td><td>文档的主要内容，不过没有被赋予语义，不如直接div。</td></tr></tbody></table></div><p>atricle里面可以有多个section；section强调分段，article比section更强调独立性。</p><p><strong>语义化标签</strong></p><p>标签的默认效果不重要，语义最重要。有利于SEO（搜索引擎优化），方便设备解析。</p><h3 id="文本标签"><a href="#文本标签" class="headerlink" title="文本标签"></a>文本标签</h3><div class="table-container"><table><thead><tr><th>标签</th><th>语义</th></tr></thead><tbody><tr><td>em</td><td>要着重阅读的内容</td></tr><tr><td>strong</td><td>重要的内容（比em强）</td></tr><tr><td>span</td><td>没有语义，通用容器</td></tr><tr><td>cite</td><td>作品标题(书籍、歌曲、电影、电视节目、绘画、雕塑)</td></tr><tr><td>dfn</td><td>特殊术语，或专属名词</td></tr><tr><td>del 与ins</td><td>删除的文本【与】插入的文本</td></tr><tr><td>sub与sup</td><td>下标文字【与】上标文字</td></tr><tr><td>code</td><td>一段代码</td></tr><tr><td>samp</td><td>从正常的上下文中，将某些内容提取出来，例如:标识设备输出</td></tr><tr><td>kbd</td><td>键盘文本，表示文本是通过键盘输入的，经常用在与计算机相关的手册中</td></tr><tr><td>abbr</td><td>缩写，最好配合上title属性</td></tr><tr><td>bdo</td><td>更改文本方向，要配合dir属性，可选值: ltr(默认值，right to left) 、rtl</td></tr><tr><td>var</td><td>标记变量，可以与code标签一起使用</td></tr><tr><td>small</td><td>附属细则，例如:包括版权、法律文本。——很少使用</td></tr><tr><td>b</td><td>摘要中的关键字、评论中的产品名称。—―很少使用</td></tr><tr><td>i</td><td>本意是:人物的思想活动、所说的话等等。<br />现在多用于:呈现字体图标（后面要讲的内容)。</td></tr><tr><td>u</td><td>与正常内容有反差文本，例如:错的单词、不合适的描述等。—-很少使用</td></tr><tr><td>q</td><td>短引用—―很少使用</td></tr><tr><td>blockquote</td><td>长引用――很少使用（注意是块元素）</td></tr><tr><td>address</td><td>地址信息（注意是块元素）</td></tr><tr><td>ruby</td><td>里面写rt标签。ruby包含span以及rt，rt里面写注音</td></tr><tr><td>mark</td><td>标记出需要注意的词，例如在搜索结果里面呈现。</td></tr></tbody></table></div><h3 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;path&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;描述&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;目标&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>a标签可以包裹除了自身的别的标签。href中的内容也可以是浏览器可以打开的文件。锚点跳转可以写“#name”，或者是“#id”，任何一个标签都能加id属性。如果只写一个<code>#</code>是回到顶部，如果href里面什么都不写是刷新页面。</p><div class="table-container"><table><thead><tr><th>属性</th><th>效果</th></tr></thead><tbody><tr><td>target</td><td><code>_blank</code>，表示在新标签页中打开；<br /><code>_self</code>，表示在当前标签页中打开；默认值是self</td></tr><tr><td>download</td><td>强制触发下载。download=“文件.doc”，改变下载的文件名称。</td></tr><tr><td>name</td><td>给标签一个名字，可以用于锚点跳转</td></tr></tbody></table></div><p>超链接可以唤起指定应用，通过href中写不同的内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 唤起设备拨号 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;tel:10010&quot;</span>&gt;</span>电话联系<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 唤起设备发送邮件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;mailto:10910@qq.com&quot;</span>&gt;</span>邮件联系<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 唤起设备发送短信 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;sms:10886&quot;</span>&gt;</span>短信联系<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>有序列表：ordered list，所以标签是<code>&lt;ol&gt;</code>;</p><p>无需列表：unordered list，所以标签是<code>&lt;ul&gt;</code>;</p><p>里面列表项：list items，所以标签是<code>&lt;li&gt;</code>。</p><p>自定义列表标签是<code>&lt;dl&gt;</code>，里面每一项需要一个<code>&lt;dt&gt;</code>和数个<code>&lt;dd&gt;</code>。</p><p>H5新增：</p><p><code>&lt;datalist&gt;</code>双标签</p><p>里面用option包含每一个选项，能够实现模糊搜索，用户输入字匹配能够option中的内容。</p><p><code>&lt;details&gt;</code>双标签，<code>&lt;summary&gt;</code>双标签</p><p>有details就要有summary，summary要卸载details里面，下面再用别的标签写具体意义。</p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表格标题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表格头部 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- tr表示新一行 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>表头1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>表头2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>表头3<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表格主体 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- tr表示新一行 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>数据a1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>数据a2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>数据a3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>数据b1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>数据b2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>数据b3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 表格脚注 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- tr表示新一行 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>共计数据<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>要注意在<code>&lt;table&gt;</code>标签中调整表格的高度的时候，会优先补偿调整<code>&lt;tbody&gt;</code>部分的高度。</p><h4 id="表格属性"><a href="#表格属性" class="headerlink" title="表格属性"></a>表格属性</h4><p>cellspacing=”0“，调整的是单元格之间的间距。</p><p>align=”left”，水平对齐方式。</p><p>valign=”middle”，垂直对齐方式。</p><h4 id="跨行跨列"><a href="#跨行跨列" class="headerlink" title="跨行跨列"></a>跨行跨列</h4><p>对于th或者td的一个属性。</p><p>跨列是colspan，赋值为几就跨几列。</p><p>跨列是rowspan，赋值为几就跨几行。</p><p>赋给跨行跨列后大概率会出现单元格行上的溢出，只需要删除多余的单元格就可以。</p><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><h4 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h4><div class="table-container"><table><thead><tr><th>标签</th><th>语义</th></tr></thead><tbody><tr><td>form</td><td>表单</td></tr><tr><td>input</td><td>输入框</td></tr><tr><td>button</td><td>按钮</td></tr></tbody></table></div><p>action属性可以写提交去的地址。如果不写就是提交给自己。</p><p>H5新增了一个属性novalidate，表示不做任何校验。</p><h4 id="常用控件"><a href="#常用控件" class="headerlink" title="常用控件"></a>常用控件</h4><h5 id="输入框"><a href="#输入框" class="headerlink" title="输入框"></a>输入框</h5><p>input标签。</p><p>type属性取值：</p><ol><li>text：文本输入。</li><li>password：密码框。</li><li>radio：单选框。一般多个单选框需要设置同样的name。点击后选择到的是单选框的value。</li><li>checkbox：多选框。同样需要写相同的name以及各自的value。</li><li>hidden：隐藏域，隐藏该输入框。</li><li>submit：提交。转变为一个按钮，其value属性表示提交按钮的文字。不能写name。</li><li>reset：重置，转变为一个按钮，参照submit。</li><li>button：转变为一个普通按钮，value表示按钮上的文字。</li><li>email：自动校验邮箱合法。</li><li>url：校验网址。</li><li>number：数字类型。step属性可以规定每一次点击上下后的改变步长，也可以规定max和min。</li><li>search：可以快速清除所有已输入的文字。但是没有校验。</li><li>tel：用在PE端，弹出的是数字输入框。</li><li>range：范围选择器。一个滑动选择器，可以调max和min，value是默认值。</li><li>color：颜色选择器。</li><li>date：日期选择。</li><li>month：只能选择月份。</li><li>week：只能选择周。</li><li>time：选择时间。</li><li>datetime-local：日期+时间。</li></ol><p>name属性：数据的名称。</p><p>value属性：输入框的默认值。</p><p>maxlength属性：输入框最大可输入长度。</p><p>checked属性：没有值，写这个属性表示这个选择框默认被选中。</p><p>placeholder：占位字。</p><p>required：没有值，写在谁身上谁就必填，写在多选框上必选。</p><p>autofocus：没有值，写在谁身上就自动聚焦在谁身上。</p><p>autocomplete：键值对，值只有on开启和off关闭。检测输入过的历史纪录，只能写在普通text输入框上。</p><p>pattern：正则表达式。限制不了多行输入。往往需要与required配合。</p><h5 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h5><p>button标签。</p><p>type属性取值：</p><ol><li>submit（默认）：提交。</li><li>reset：重置。</li><li>button：一个普通按钮。</li></ol><h5 id="文本域"><a href="#文本域" class="headerlink" title="文本域"></a>文本域</h5><p>textarea标签。</p><p>属性：cols：列数；rows：行数；name：名称。</p><h5 id="下拉框"><a href="#下拉框" class="headerlink" title="下拉框"></a>下拉框</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;name1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;选项一&quot;</span>&gt;</span>选项一<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;选项二&quot;</span> <span class="attr">selected</span>&gt;</span>选项二<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;选项三&quot;</span>&gt;</span>选项三<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中name是指名称，传递的值是option标签中的value值。selected属性表示默认被选中的值。</p><h5 id="H5新增"><a href="#H5新增" class="headerlink" title="H5新增"></a>H5新增</h5><h4 id="禁用表单控件"><a href="#禁用表单控件" class="headerlink" title="禁用表单控件"></a>禁用表单控件</h4><p>一个属性disabled，表示禁用。</p><h4 id="其他标签"><a href="#其他标签" class="headerlink" title="其他标签"></a>其他标签</h4><h5 id="label标签"><a href="#label标签" class="headerlink" title="label标签"></a>label标签</h5><p>label标签属性：</p><p>for=”控件的id”，关联到for的内容对应的控件。</p><p>实现关联还可以在一个label标签中包住input标签和说明，这样也能实现关联。</p><h5 id="fieldset和legend标签"><a href="#fieldset和legend标签" class="headerlink" title="fieldset和legend标签"></a>fieldset和legend标签</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">legend</span>&gt;</span>分类1<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">    ...其他内容...</span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="框架标签"><a href="#框架标签" class="headerlink" title="框架标签"></a>框架标签</h3><p>iframe</p><p>可以用于嵌入一个普通网页</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;https://www.bilibili.com&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以嵌入其他内容，例如本地文件。</p><p>还可以和a标签的target，或者是表单的target配合。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.bilibili.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;bili&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">name</span>=<span class="string">&quot;bili&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="字符实体"><a href="#字符实体" class="headerlink" title="字符实体"></a>字符实体</h3><div class="table-container"><table><thead><tr><th>字符实体</th><th>效果</th></tr></thead><tbody><tr><td><code>&amp;nbsp;</code>、<code>&amp;#160;</code></td><td>空格</td></tr><tr><td><code>&amp;lt;</code></td><td>小于号&lt;</td></tr><tr><td><code>&amp;gt;</code></td><td>大于号&gt;</td></tr><tr><td><code>&amp;amp;</code></td><td>与符号&amp;</td></tr><tr><td><code>&amp;yen;</code></td><td>人民币￥</td></tr><tr><td><code>&amp;copy;</code></td><td>版权所有&copy;</td></tr><tr><td><code>&amp;times;</code></td><td>乘号&times;</td></tr><tr><td><code>&amp;divide;</code></td><td>除号&divide;</td></tr></tbody></table></div><p>具体见官网给出的<a href="https://html.spec.whatwg.org/multipage/named-characters.html#named-character-references">对照表</a>。</p><h3 id="全局属性"><a href="#全局属性" class="headerlink" title="全局属性"></a>全局属性</h3><p>id：唯一标识。</p><p>class：类名。</p><p>style：设置样式。</p><p>dir：对齐。取值有rtl、ltr。但是用在bdo上是文字的顺序。</p><p>title：额外说明，鼠标悬浮的时候会有提示。</p><p>lang：设置语言。</p><p>其余见<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes">官网</a>。</p><h4 id="H5新增-1"><a href="#H5新增-1" class="headerlink" title="H5新增"></a>H5新增</h4><div class="table-container"><table><thead><tr><th>标签</th><th>效果</th></tr></thead><tbody><tr><td>contenteditable</td><td>取值有true和false。表示用户是否可编辑。</td></tr><tr><td>draggable</td><td>取值有true和false。表示用户是否可拖动。一般配合js</td></tr><tr><td>hidden</td><td>隐藏元素。不占位。</td></tr><tr><td>spellcheck</td><td>取值有true和false，拼写检查。</td></tr><tr><td>contextmenu</td><td>定制鼠标右键弹出的菜单</td></tr><tr><td>data-*</td><td>对于后面的*代表的私有定制数据。</td></tr></tbody></table></div><h3 id="meta元信息"><a href="#meta元信息" class="headerlink" title="meta元信息"></a>meta元信息</h3><p>配置网站基本信息，例如移动端适配、网页关键字、网页描述信息等等。具体见<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/meta">官网</a>，以及<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/meta/name">标准元数据名称 </a>。</p><h3 id="H5新增状态标签"><a href="#H5新增状态标签" class="headerlink" title="H5新增状态标签"></a>H5新增状态标签</h3><p><code>&lt;meter&gt;</code>双标签。其属性：</p><div class="table-container"><table><thead><tr><th>属性</th><th>意义</th></tr></thead><tbody><tr><td>max</td><td>最大</td></tr><tr><td>min</td><td>最小</td></tr><tr><td>value</td><td>当前值</td></tr><tr><td>low</td><td>低值分界线</td></tr><tr><td>high</td><td>高值分界线</td></tr><tr><td>optimum</td><td>规定最适值</td></tr></tbody></table></div><p><code>&lt;progress&gt;</code>双标签</p><p>一般是当前进度，属性有max和value。</p><h3 id="H5新增视频标签"><a href="#H5新增视频标签" class="headerlink" title="H5新增视频标签"></a>H5新增视频标签</h3><p>video</p><div class="table-container"><table><thead><tr><th>属性</th><th>效果</th></tr></thead><tbody><tr><td>src</td><td>视频源</td></tr><tr><td>controls</td><td>没有值，添加控制。</td></tr><tr><td>muted</td><td>静音</td></tr><tr><td>autoplay</td><td>自动播放，但是需要静音才能有效，但是会收到媒体参与度的影响，在一段时间内重复播放后，媒体参与度提高，就可以实现不静音也能自动播放。chrome浏览器媒体参与度查询<a href="chrome://media-engagement/">见此</a>。</td></tr><tr><td>loop</td><td>循环播放。</td></tr><tr><td>poster</td><td>值是一个具体的图片地址，改变视频封面。</td></tr><tr><td>preload</td><td>预加载。值有auto：浏览器自动协调；none：不预加载；metadata：加载最基本的信息。</td></tr></tbody></table></div><p>B站的播放器开源，可以引用。</p><h3 id="H5新增音频标签"><a href="#H5新增音频标签" class="headerlink" title="H5新增音频标签"></a>H5新增音频标签</h3><p>audio</p><div class="table-container"><table><thead><tr><th>属性</th><th>效果</th></tr></thead><tbody><tr><td>src</td><td>音频源</td></tr><tr><td>controls</td><td>控制</td></tr><tr><td>autoplay</td><td>自动播放。</td></tr><tr><td>muted</td><td>静音</td></tr><tr><td>loop</td><td>循环</td></tr><tr><td>preload</td><td>预加载。值有auto：浏览器自动协调；none：不预加载；metadata：加载最基本的信息。</td></tr></tbody></table></div><h3 id="其他杂项"><a href="#其他杂项" class="headerlink" title="其他杂项"></a>其他杂项</h3><h4 id="编码方式"><a href="#编码方式" class="headerlink" title="编码方式"></a>编码方式</h4><p>一般使用的是UTF-8.</p><p>可以在head标签中增加如下语句来表示用的是什么编码方式。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mata</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h4><p>在根元素html中加入<code>lang=&quot;zh-CN&quot;</code>表示简体中文。</p><h4 id="一些常用标签"><a href="#一些常用标签" class="headerlink" title="一些常用标签"></a>一些常用标签</h4><p>换行：br；</p><p>分割线：hr；</p><p>按照原文格式显示：pre</p><h4 id="H5兼容性"><a href="#H5兼容性" class="headerlink" title="H5兼容性"></a>H5兼容性</h4><p>IE8不支持H5.</p><p>利用script标签引入大厂的H5兼容性优化js文件。</p><p>或者使用meta元信息调整兼容性。</p><p>例如<code>&lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot;&gt;</code>，用于给一些国产双核浏览器看，表示优先使用webkit渲染。</p><h4 id="注释宏"><a href="#注释宏" class="headerlink" title="注释宏"></a>注释宏</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--[if lt ie 9]&gt;</span></span><br><span class="line"><span class="comment">&lt;script src=&quot;...&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">&lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure><p>表示如果版本小于ie9，就运行宏之间的内容。</p><p>宏还有lte小于等于、gt大于、gte大于等于、！非。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>about</title>
      <link href="/Blog/about/index.html"/>
      <url>/Blog/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/Blog/css/custom.css"/>
      <url>/Blog/css/custom.css</url>
      
        <content type="html"><![CDATA[/* @font-face {  font-family: Candyhome;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;} */@font-face {    font-family: ZhuZiAYuanJWD;    src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);    font-display: swap;    font-weight: lighter;  }    div#menus {    font-family: "ZhuZiAYuanJWD";  }  h1#site-title {    font-family: ZhuZiAYuanJWD;    font-size: 3em !important;  }  a.article-title,  a.blog-slider__title,  a.categoryBar-list-link,  h1.post-title {    font-family: ZhuZiAYuanJWD;  }    .iconfont {    font-family: "iconfont" !important;    font-size: 3em;    /* 可以定义图标大小 */    font-style: normal;    -webkit-font-smoothing: antialiased;    -moz-osx-font-smoothing: grayscale;  }    /* 时间轴生肖icon */  svg.icon {    /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */    width: 1em;    height: 1em;    /* width和height定义图标的默认宽度和高度*/    vertical-align: -0.15em;    fill: currentColor;    overflow: hidden;  }    .icon-zhongbiao::before {    color: #f7c768;  }    /* bilibli番剧插件 */  #article-container .bangumi-tab.bangumi-active {    background: var(--anzhiyu-theme);    color: var(--anzhiyu-ahoverbg);    border-radius: 10px;  }  a.bangumi-tab:hover {    text-decoration: none !important;  }  .bangumi-button:hover {    background: var(--anzhiyu-theme) !important;    border-radius: 10px !important;    color: var(--anzhiyu-ahoverbg) !important;  }  a.bangumi-button.bangumi-nextpage:hover {    text-decoration: none !important;  }  .bangumi-button {    padding: 5px 10px !important;  }    a.bangumi-tab {    padding: 5px 10px !important;  }  svg.icon.faa-tada {    font-size: 1.1em;  }  .bangumi-info-item {    border-right: 1px solid #f2b94b;  }  .bangumi-info-item span {    color: #f2b94b;  }  .bangumi-info-item em {    color: #f2b94b;  }    /* 解决artitalk的图标问题 */  #uploadSource > svg {    width: 1.19em;    height: 1.5em;  }    /*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */  #page-header:not(.not-top-img):before {    background-color: transparent !important;  }    /* 首页文章卡片 */  #recent-posts > .recent-post-item {    background: rgba(255, 255, 255, 0.9);  }    /* 首页侧栏卡片 */  #aside-content .card-widget {    background: rgba(255, 255, 255, 0.9);  }    /* 文章页面正文背景 */  div#post {    background: rgba(255, 255, 255, 0.9);  }    /* 分页页面 */  div#page {    background: rgba(255, 255, 255, 0.9);  }    /* 归档页面 */  div#archive {    background: rgba(255, 255, 255, 0.9);  }    /* 标签页面 */  div#tag {    background: rgba(255, 255, 255, 0.9);  }    /* 分类页面 */  div#category {    background: rgba(255, 255, 255, 0.9);  }    /*夜间模式伪类遮罩层透明*/  [data-theme="dark"] #recent-posts > .recent-post-item {    background: #121212;  }    [data-theme="dark"] .card-widget {    background: #121212 !important;  }    [data-theme="dark"] div#post {    background: #121212 !important;  }    [data-theme="dark"] div#tag {    background: #121212 !important;  }    [data-theme="dark"] div#archive {    background: #121212 !important;  }    [data-theme="dark"] div#page {    background: #121212 !important;  }    [data-theme="dark"] div#category {    background: #121212 !important;  }    [data-theme="dark"] div#category {    background: transparent !important;  }  /* 页脚透明 */  #footer {    background: transparent !important;  }    /* 头图透明 */  #page-header {    background: transparent !important;  }    #rightside > div > button {    border-radius: 5px;  }    /* 滚动条 */    ::-webkit-scrollbar {    width: 10px;    height: 10px;  }    ::-webkit-scrollbar-thumb {    background-color: #3b70fc;    border-radius: 2em;  }    ::-webkit-scrollbar-corner {    background-color: transparent;  }    ::-moz-selection {    color: #fff;    background-color: #3b70fc;  }    /* 音乐播放器 */    /* .aplayer .aplayer-lrc {    display: none !important;  } */    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {    left: -66px !important;    transition: all 0.3s;    /* 默认情况下缩进左侧66px，只留一点箭头部分 */  }    .aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {    left: 0 !important;    transition: all 0.3s;    /* 鼠标悬停是左侧缩进归零，完全显示按钮 */  }    .aplayer.aplayer-fixed {    z-index: 999999 !important;  }    /* 评论框  */  .vwrap {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 30px 0px;  }    /* 设置评论框 */    .vcard {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 0px 0px;  }    /* md网站下划线 */  #article-container a:hover {    text-decoration: none !important;  }    #article-container #hpp_talk p img {    display: inline;  }    /* 404页面 */  #error-wrap {    position: absolute;    top: 40%;    right: 0;    left: 0;    margin: 0 auto;    padding: 0 1rem;    max-width: 1000px;    transform: translate(0, -50%);  }    #error-wrap .error-content {    display: flex;    flex-direction: row;    justify-content: center;    align-items: center;    margin: 0 1rem;    height: 18rem;    border-radius: 8px;    background: var(--card-bg);    box-shadow: var(--card-box-shadow);    transition: all 0.3s;  }    #error-wrap .error-content .error-img {    box-flex: 1;    flex: 1;    height: 100%;    border-top-left-radius: 8px;    border-bottom-left-radius: 8px;    background-color: #3b70fc;    background-position: center;    background-size: cover;  }    #error-wrap .error-content .error-info {    box-flex: 1;    flex: 1;    padding: 0.5rem;    text-align: center;    font-size: 14px;    font-family: Titillium Web, "PingFang SC", "Hiragino Sans GB", "Microsoft JhengHei", "Microsoft YaHei", sans-serif;  }  #error-wrap .error-content .error-info .error_title {    margin-top: -4rem;    font-size: 9em;  }  #error-wrap .error-content .error-info .error_subtitle {    margin-top: -3.5rem;    word-break: break-word;    font-size: 1.6em;  }  #error-wrap .error-content .error-info a {    display: inline-block;    margin-top: 0.5rem;    padding: 0.3rem 1.5rem;    background: var(--btn-bg);    color: var(--btn-color);  }    #body-wrap.error .aside-list {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    bottom: 0px;    position: absolute;    padding: 1rem;    width: 100%;    overflow: scroll;  }    #body-wrap.error .aside-list .aside-list-group {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    max-width: 1200px;    margin: 0 auto;  }    #body-wrap.error .aside-list .aside-list-item {    padding: 0.5rem;  }    #body-wrap.error .aside-list .aside-list-item img {    width: 100%;    object-fit: cover;    border-radius: 12px;  }    #body-wrap.error .aside-list .aside-list-item .thumbnail {    overflow: hidden;    width: 230px;    height: 143px;    background: var(--anzhiyu-card-bg);    display: flex;  }    #body-wrap.error .aside-list .aside-list-item .content .title {    -webkit-line-clamp: 2;    overflow: hidden;    display: -webkit-box;    -webkit-box-orient: vertical;    line-height: 1.5;    justify-content: center;    align-items: flex-end;    align-content: center;    padding-top: 0.5rem;    color: white;  }    #body-wrap.error .aside-list .aside-list-item .content time {    display: none;  }    /* 代码框主题 */  #article-container figure.highlight {    border-radius: 10px;  }]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/Blog/categories/index.html"/>
      <url>/Blog/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/Blog/js/ali_font.js"/>
      <url>/Blog/js/ali_font.js</url>
      
        <content type="html"><![CDATA[!(function (c) {    var l,      h,      a,      t,      i,      v =        '<svg><symbol id="icon-dragon_chen" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-498.122105 265.620211L431.157895 754.526316V485.052632h-66.074948c-14.470737 110.645895-44.355368 197.066105-102.696421 260.742736l-39.747368-36.432842C306.526316 617.876211 323.368421 462.901895 323.368421 242.526316V215.578947h377.263158v53.894737H377.182316c-0.404211 58.260211-2.209684 112.128-6.359579 161.684211H700.631579v53.894737h-122.152421a481.172211 481.172211 0 0 0 76.826947 119.70021l66.479158-39.855158 27.728842 46.214737-54.460631 32.687158c29.507368 24.953263 63.757474 45.675789 102.80421 58.098526l-16.303158 51.361684c-134.224842-42.711579-222.773895-167.073684-261.551158-268.207157H485.052632v221.857684l68.985263-41.391158 27.728842 46.214737-109.783579 65.886316zM646.736842 377.263158h-215.578947v-53.894737h215.578947v53.894737z" fill="#231F20" ></path></symbol><symbol id="icon-dog_xu" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-375.592421 150.393263c33.684211 44.544 75.210105 74.698105 124.739369 90.812632l11.425684 3.718737 10.401684-6.009264C781.204211 727.740632 808.421053 622.565053 808.421053 592.842105h-53.894737c0 22.069895-19.132632 80.869053-33.711158 103.504842-34.816-14.605474-64.538947-39.262316-89.249684-74.13221 48.316632-55.269053 92.079158-117.328842 120.535579-179.900632l-49.044211-22.285473c-23.767579 52.250947-59.742316 104.717474-100.055579 152.656842-24.010105-50.930526-41.148632-115.927579-51.658105-195.395369H700.631579v-53.894737h-155.189895A1848.050526 1848.050526 0 0 1 538.947368 161.684211h-53.894736c0 58.206316 2.155789 112.074105 6.494315 161.68421H323.368421v26.947368c0 216.549053-13.177263 263.545263-100.702316 359.046737l39.747369 36.432842c63.326316-69.093053 92.806737-118.272 105.714526-206.848H485.052632v-53.894736h-111.319579a1742.147368 1742.147368 0 0 0 3.449263-107.789474h120.158316c12.611368 98.250105 35.031579 177.475368 67.395368 238.187789-61.978947 65.536-128.053895 117.975579-173.298526 142.282106l25.519158 47.481263c47.589053-25.573053 114.095158-77.446737 177.55621-142.821053z m125.170526-411.971368l-80.842105-80.842106-38.103579 38.103579 80.842105 80.842106 38.103579-38.103579z" fill="#231F20" ></path></symbol><symbol id="icon-dog" viewBox="0 0 1024 1024"><path d="M894.814316 904.434526l83.240421-183.134315-13.824-13.204211c-0.485053-0.458105-45.648842-47.589053-47.939369-185.263158-0.134737-7.922526-0.134737-33.953684-0.134736-55.996631-30.693053 15.306105-70.090105 19.887158-106.09179 19.887157-92.752842 0-163.624421-23.983158-210.647579-71.275789a192.512 192.512 0 0 1-27.944421-36.513684H377.263158v377.263158c342.662737 0 403.105684 51.092211 494.592 128.377263 7.922526 6.682947 15.521684 13.312 22.959158 19.86021z" fill="#85C3DE" ></path><path d="M326.063158 282.947368c0 34.250105-13.231158 44.463158-29.642105 44.463158s-29.642105-10.213053-29.642106-44.463158c0-34.223158 13.231158-44.463158 29.642106-44.463157s29.642105 10.24 29.642105 44.463157zM269.473684 430.295579v311.646316L190.275368 916.210526h59.203369L323.368421 753.637053V377.263158h-26.947368c-119.403789 0-172.732632-53.382737-185.505685-107.789474h35.624421c51.092211 0 68.581053-15.764211 120.535579-62.544842 12.773053-11.506526 28.079158-25.276632 47.023158-41.741474l18.351158-15.952842-69.658947-99.139368-44.085895 30.989474 41.768421 59.472842c-11.183158 9.862737-20.884211 18.593684-29.480421 26.327579C180.736 212.156632 176.235789 215.578947 146.539789 215.578947H53.894737v26.947369c0 88.710737 66.910316 178.149053 215.578947 187.769263z m216.710737-161.414737c2.290526 71.733895 28.698947 136.326737 75.048421 182.918737C618.711579 509.628632 702.437053 538.947368 810.091789 538.947368c18.593684 0 36.190316-1.158737 52.628211-3.449263 3.745684 111.265684 33.630316 170.334316 51.496421 196.015158l-38.507789 84.722526C782.174316 742.049684 688.774737 700.631579 377.263158 700.631579v53.894737c34.277053 0 65.697684 0.512 94.639158 1.509052L374.595368 970.105263h59.203369l96.013474-211.240421c66.182737 4.338526 117.005474 11.829895 157.911578 22.016L626.229895 916.210526h59.176421l54.16421-119.134315c47.616 18.405053 79.737263 42.091789 113.125053 69.739789L805.753263 970.105263h59.203369l113.071157-248.778105-13.824-13.204211c-0.485053-0.458105-45.648842-47.589053-47.939368-185.263158C985.168842 498.553263 1024 447.811368 1024 377.263158c0-95.205053-66.506105-161.684211-161.684211-161.684211v53.894737c65.482105 0 107.789474 42.307368 107.789474 107.789474 0 89.088-87.013053 107.789474-160.013474 107.789474-92.752842 0-163.624421-23.983158-210.647578-71.27579-30.315789-30.504421-45.891368-65.832421-53.35579-98.735158 11.210105 6.952421 22.932211 13.338947 35.274105 19.186527l23.04-48.720843c-92.106105-43.654737-148.992-128.646737-219.243789-243.981473l-46.026105 28.05221c49.448421 81.246316 92.968421 148.506947 147.051789 199.302737z" fill="#231F20" ></path></symbol><symbol id="icon-goat" viewBox="0 0 1024 1024"><path d="M548.378947 646.736842a952.32 952.32 0 0 1 140.90779-161.68421H107.789474c0 107.600842 0 107.600842-63.649685 169.283368l-13.069473 12.665263L66.721684 754.526316h417.172211c20.345263-41.472 43.654737-77.446737 64.485052-107.789474z" fill="#F7C768" ></path><path d="M608.256 144.734316C555.762526 115.577263 506.098526 107.789474 485.052632 107.789474V53.894737c32.579368 0 91.270737 11.452632 149.369263 43.735579 75.290947 41.822316 130.694737 94.531368 171.385263 150.878316C755.873684 288.013474 697.101474 323.368421 646.736842 323.368421h-107.789474v-53.894737h107.789474c20.506947 0 48.424421-11.210105 80.437895-31.285895a471.04 471.04 0 0 0-118.918737-93.453473zM832.673684 342.231579c-16.384 0-29.642105 10.24-29.642105 44.463158 0 34.250105 13.231158 44.463158 29.642105 44.463158s29.642105-10.213053 29.642105-44.463158c0-34.223158-13.231158-44.463158-29.642105-44.463158zM1024 619.789474C1024 347.109053 901.066105 122.448842 686.753684 3.395368l-26.165895 47.104C914.324211 191.461053 964.688842 440.400842 969.647158 592.842105h-84.506947c-17.92-35.624421-45.352421-69.12-87.013053-101.995789l-16.788211-13.285053-16.734315 13.392842c-66.128842 52.897684-134.629053 127.083789-187.311158 209.677474H102.965895l-8.272842-20.318316C159.043368 617.013895 161.684211 603.109053 161.684211 485.052632v-53.894737h485.052631v-53.894737H161.684211c0-80.384 14.309053-110.026105 66.586947-137.916632l-25.384421-47.535158C123.365053 234.226526 107.789474 291.920842 107.789474 377.263158v107.789474c0 107.600842 0 107.600842-63.649685 169.283368l-13.069473 12.665263L110.618947 862.315789h58.206316l-43.897263-107.789473h103.477895l43.897263 107.789473h58.206316l-43.897263-107.789473h259.47621C508.981895 824.939789 485.052632 899.152842 485.052632 970.105263h53.894736c0-68.688842 27.270737-144.060632 68.958316-215.578947H687.157895c7.410526 0 13.473684 6.063158 13.473684 13.473684V862.315789h53.894737v-94.315789c0-37.160421-30.208-67.368421-67.368421-67.368421h-44.65179c40.771368-58.017684 89.438316-111.427368 138.913684-153.626947C841.512421 600.037053 862.315789 655.225263 862.315789 754.526316h53.894737c0-38.912-2.748632-74.482526-11.102315-107.789474H1024v-26.947368z" fill="#231F20" ></path></symbol><symbol id="icon-goat_wei" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 50.202947c52.304842 70.925474 136.973474 152.144842 232.528843 190.383158l19.994947-50.041263c-109.271579-43.708632-202.805895-152.629895-238.780632-217.49221H808.421053v-53.894737H538.947368v-53.894737h215.578948v-53.894737h-215.578948V161.684211h-53.894736v161.68421h-215.578948v53.894737h215.578948v53.894737H215.578947v53.894737h255.757474c-35.974737 64.862316-129.536 173.783579-238.807579 217.49221l20.021895 50.041263c95.528421-38.238316 180.197053-119.484632 232.501895-190.383158V808.421053h53.894736v-246.218106z" fill="#231F20" ></path></symbol><symbol id="icon-dragon" viewBox="0 0 1024 1024"><path d="M366.376421 344.441263l152.980211-152.98021c43.142737-43.142737 141.204211-9.216 270.201263 115.738947-15.225263 9.835789-25.114947 15.818105-44.13979 32.256s-38.076632 35.489684-59.418947 56.832c-4.203789 4.203789-51.173053 53.221053-78.740211 82.027789-10.805895-12.126316-22.743579-24.171789-34.654315-36.082526L493.136842 362.792421l-54.218105 54.218105-72.542316-72.569263zM862.315789 512c0 46.834526-45.352421 80.842105-107.789473 80.842105-108.948211 0-189.359158-28.806737-267.129263-56.697263C414.100211 509.871158 344.872421 485.052632 258.182737 485.052632 80.788211 485.052632 0 588.126316 0 683.897263h53.894737C73.216 659.779368 135.302737 646.736842 177.340632 646.736842c77.338947 0 223.124211 23.282526 291.893894 47.912421C547.462737 722.701474 615.989895 754.526316 734.315789 754.526316 862.315789 754.526316 916.210526 670.315789 916.210526 512h-53.894737z" fill="#FF8787" ></path><path d="M552.421053 1024c-69.766737 0-113.825684-13.958737-156.402527-27.459368-54.487579-17.273263-110.807579-35.004632-232.421052-26.516211l-3.826527-53.733053c131.718737-9.458526 195.934316 10.967579 252.52379 28.887579 42.226526 13.365895 78.686316 24.926316 140.126316 24.926316 92.752842 0 148.210526-57.936842 148.210526-113.960421 0-16.949895-5.524211-101.618526-114.634105-101.618526-64.970105 0-112.747789 23.336421-163.328 48.02021C365.325474 830.571789 300.301474 862.315789 204.288 862.315789 85.908211 862.315789 0 787.294316 0 683.897263 0 588.126316 80.788211 485.052632 258.182737 485.052632c86.689684 0 155.917474 24.818526 229.214316 51.09221 45.810526 16.410947 92.564211 33.172211 145.488842 44.166737 9.000421-7.033263 13.850947-16.276211 13.850947-26.758737 0-37.187368-37.672421-74.859789-74.13221-111.265684l-3.287579-3.287579 38.103579-38.103579 3.260631 3.287579C652.853895 446.275368 700.631579 494.026105 700.631579 553.552842c0 12.719158-2.802526 24.926316-7.976421 36.109474A594.997895 594.997895 0 0 0 754.526316 592.842105c62.437053 0 107.789474-34.007579 107.789473-80.842105 0-58.853053-52.870737-110.268632-108.840421-164.702316l-8.057263-7.841684c-19.024842 16.437895-38.076632 35.489684-59.418947 56.832l-38.103579-38.103579c74.805895-74.832842 134.898526-134.898526 268.314947-141.931789V55.619368c-63.407158 7.787789-120.993684 39.424-121.667368 39.801264l-15.818105 8.811789-14.120421-11.344842C731.701895 66.452211 709.712842 53.894737 673.684211 53.894737c-41.418105 0-74.347789 25.869474-109.190737 53.301895-26.624 20.911158-54.137263 42.549895-86.851369 53.194105L469.342316 161.684211h-69.093053l-105.525895 105.525894-38.103579-38.130526L324.015158 161.684211H161.684211V107.789474h303.104c22.231579-8.272842 43.708632-25.168842 66.398315-42.981053C569.829053 34.438737 613.618526 0 673.684211 0c48.909474 0 81.408 17.946947 110.888421 40.097684C813.702737 26.300632 877.729684 0 943.157895 0h26.947368v323.368421h-53.894737v-53.167158c-54.164211 3.098947-92.914526 15.845053-127.002947 36.675369l1.832421 1.778526C852.587789 368.505263 916.210526 430.376421 916.210526 512c0 60.928-43.708632 109.945263-107.789473 127.622737V700.631579h53.894736v-53.894737h53.894737v53.894737h53.894737v53.894737h-53.894737v53.894737h-53.894737v-53.894737h-53.894736c-29.722947 0-53.894737-24.171789-53.894737-53.894737v-53.894737c-118.325895 0-207.063579-31.797895-285.318737-59.877053C400.437895 562.229895 335.494737 538.947368 258.182737 538.947368 117.059368 538.947368 53.894737 611.732211 53.894737 683.897263 53.894737 757.221053 115.738947 808.421053 204.288 808.421053c11.910737 0 23.228632-0.538947 34.034526-1.536C248.454737 796.321684 269.473684 770.640842 269.473684 739.166316c0-33.118316-43.088842-70.979368-58.152421-81.596632l30.935579-44.139789c8.299789 5.793684 81.111579 58.664421 81.111579 125.736421 0 19.429053-4.527158 37.052632-10.994526 52.304842 30.773895-10.051368 58.314105-23.498105 86.662737-37.349053C452.877474 727.848421 508.577684 700.631579 585.997474 700.631579 702.410105 700.631579 754.526316 778.725053 754.526316 856.144842 754.526316 938.657684 678.912 1024 552.421053 1024z m-21.180632-623.104L493.136842 362.792421l137.889684-137.889684 38.103579 38.103579-137.889684 137.889684z m-126.760421-18.351158l-38.103579-38.103579 152.980211-152.98021 38.103579 38.103579-152.980211 152.98021z m282.004211-218.624c15.494737-9.754947 43.331368-31.447579 43.331368-31.447579-25.734737-27.809684-49.556211-33.333895-67.368421-29.07621-19.240421 4.608-37.753263 24.602947-37.753263 24.602947s42.253474 22.447158 61.790316 35.920842z" fill="#231F20" ></path></symbol><symbol id="icon-horse" viewBox="0 0 1024 1024"><path d="M776.003368 646.736842c16.599579-99.947789 43.439158-181.086316 83.213474-256.538947l6.817684-12.934737H269.473684c-36.756211 0-53.894737 54.945684-53.894737 92.05221 0 46.753684 6.656 77.527579 70.278737 176.074106l84.533895 128.269473L498.876632 646.736842h277.126736z" fill="#FFAF6E" ></path><path d="M1024 0v404.210526c0 33.333895 0 134.736842-92.079158 134.736842h-13.824l-78.362947-109.056c-22.743579 49.906526-40.340211 103.046737-53.490527 162.950737h115.092211C937.310316 592.842105 970.105263 625.637053 970.105263 661.638737c0 60.631579-69.389474 154.300632-77.312 164.75621l-43.008-32.471579C875.466105 759.861895 916.210526 693.813895 916.210526 661.638737c0-5.982316-8.919579-14.901895-14.901894-14.901895h-125.332211C761.128421 736.121263 754.526316 840.569263 754.526316 970.105263h-53.894737c0-283.971368 31.097263-453.605053 110.888421-605.049263l20.318316-38.534737 112.801684 156.995369c14.443789-4.419368 25.465263-20.938105 25.465263-79.306106V0h53.894737z m-161.684211 161.684211h53.894737V0h-53.894737v80.842105c-17.381053-14.955789-38.184421-26.947368-80.842105-26.947368h-134.736842v53.894737h134.736842c37.672421 0 80.842105 40.906105 80.842105 53.894737z m-107.789473 0h-215.578948v53.894736h161.684211l53.894737-53.894736zM300.894316 766.544842L400.680421 916.210526h64.754526l-95.043368-142.551579L498.876632 646.736842h167.855157a1212.631579 1212.631579 0 0 1 9.431579-53.894737h-199.383579l-175.885473 173.702737z m109.97221-184.400842l-37.861052-38.319158-132.419369 130.802526C173.729684 571.095579 161.684211 529.812211 161.684211 469.315368 161.684211 398.578526 199.464421 323.368421 269.473684 323.368421h323.368421l53.894737-53.894737H269.473684c-6.709895 0-13.258105 0.565895-19.698526 1.482105C234.927158 249.451789 204.638316 215.578947 160.633263 215.578947 65.967158 215.578947 0 349.291789 0 469.315368c0 70.170947 16.141474 136.650105 49.232842 202.671158L6.197895 723.833263l41.472 34.41179 66.128842-79.737264-8.704-16.033684C83.105684 622.133895 53.894737 558.214737 53.894737 469.315368 53.894737 368.451368 106.765474 269.473684 160.633263 269.473684c13.231158 0 25.815579 9.889684 35.43579 20.533895C142.874947 321.967158 107.789474 388.500211 107.789474 469.315368c0 78.201263 19.698526 130.937263 93.642105 243.981474l-55.296 54.622316L280.899368 970.105263h64.754527l-130.048-195.072 195.260631-192.889263z" fill="#231F20" ></path></symbol><symbol id="icon-monkey_shen" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#BBC4C9" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 134.736842h161.684211v53.894737h53.894737V269.473684h-215.578948V161.684211h-53.894736v107.789473h-215.578948v431.157895h53.894737v-53.894737h161.684211v215.578947h53.894736v-215.578947z m0-161.68421h161.684211v107.789473h-161.684211v-107.789473z m-215.578947 0h161.684211v107.789473h-161.684211v-107.789473z m215.578947-161.684211h161.684211v107.789474h-161.684211v-107.789474z m-215.578947 0h161.684211v107.789474h-161.684211v-107.789474z" fill="#231F20" ></path></symbol><symbol id="icon-ox_chou" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-161.68421 188.631579h-159.555369c13.985684-172.813474 43.115789-357.429895 70.817684-385.158737L700.631579 269.473684H323.368421v53.894737h107.169684c-1.940211 45.756632-8.192 103.962947-15.76421 161.684211H323.368421v53.894736h83.968c-9.862737 68.446316-20.264421 130.128842-25.734737 161.684211H215.578947v53.894737h592.842106v-53.894737z m-346.543158-161.684211h149.800421a3313.717895 3313.717895 0 0 0-16.842105 161.684211h-158.477474c6.036211-35.247158 16.114526-95.636211 25.519158-161.684211z m22.608842-215.578947h171.735579c-15.198316 41.121684-27.405474 100.594526-36.890948 161.684211h-150.123789c7.383579-57.505684 13.419789-115.361684 15.279158-161.684211z" fill="#231F20" ></path></symbol><symbol id="icon-monkey" viewBox="0 0 1024 1024"><path d="M757.733053 485.052632H565.894737a80.842105 80.842105 0 0 0-80.842105 80.842105v215.578947c0 40.96 43.546947 99.678316 77.446736 139.210105C596.426105 960.215579 603.055158 970.105263 603.055158 970.105263H754.526316s15.144421-18.674526 45.891368-58.071579S862.315789 809.984 862.315789 717.608421c0-89.573053-47.993263-166.346105-104.582736-232.555789z" fill="#C3D686" ></path><path d="M538.947368 1024h-53.894736c0-32.794947 25.869474-87.417263 77.446736-103.316211C528.599579 881.152 485.052632 822.433684 485.052632 781.473684c0-44.570947 36.271158-80.842105 80.842105-80.842105h80.842105v53.894737h-80.842105a26.947368 26.947368 0 0 0-26.947369 26.947368c0 19.725474 36.675368 77.473684 92.133053 134.736842h88.602947c20.210526-14.147368 88.737684-71.464421 88.737685-198.602105 0-108.382316-93.237895-202.967579-168.151579-278.986105-49.502316-50.202947-88.576-89.842526-98.735158-128.61979-11.749053-44.732632-21.584842-112.586105-26.327579-148.318315H377.263158c-45.136842 0-89.519158 8.434526-121.802105 53.894736H431.157895v53.894737c-97.28 0-107.789474 113.071158-107.789474 161.684211v53.894737h53.894737v161.68421h-53.894737v-107.789474h-26.947368c-170.253474 0-188.631579-94.234947-188.631579-134.736842 0-31.043368 35.220211-72.326737 55.727158-93.722947 2.694737-14.686316 5.847579-28.348632 9.431579-41.013895H161.684211V215.578947h31.528421C239.642947 120.993684 317.224421 107.789474 377.263158 107.789474h185.640421l2.802526 23.794526c0.134737 1.050947 12.719158 106.657684 27.944421 164.756211 6.494316 24.872421 44.624842 63.514947 84.965053 104.448C760.481684 483.813053 862.315789 587.129263 862.315789 717.608421c0 92.375579-31.124211 155.028211-61.898105 194.425263C904.919579 892.146526 970.105263 803.004632 970.105263 673.684211c0-91.405474-42.819368-154.381474-84.237474-215.255579C847.791158 402.458947 808.421053 344.576 808.421053 269.473684c0-119.349895 87.093895-161.684211 161.68421-161.68421v53.894737c-32.417684 0-107.789474 10.509474-107.789474 107.789473 0 58.502737 31.555368 104.933053 68.096 158.639158C974.282105 492.597895 1024 565.679158 1024 673.684211c0 177.286737-108.301474 296.421053-269.473684 296.421052h-161.684211c-37.672421 0-53.894737 40.906105-53.894737 53.894737zM229.214316 269.473684a384.808421 384.808421 0 0 0-14.012632 58.341053l-1.401263 8.488421-6.090105 6.117053c-22.878316 22.932211-44.813474 52.601263-46.026105 62.275368 0 56.805053 53.76 75.264 107.789473 79.386947V431.157895c0-58.691368 13.473684-119.619368 46.511158-161.684211h-86.770526zM323.368421 1024h-53.894737c0-32.794947 25.869474-87.417263 77.446737-103.316211C313.020632 881.152 269.473684 822.433684 269.473684 781.473684c0-44.570947 36.271158-80.842105 80.842105-80.842105h45.16379A188.847158 188.847158 0 0 1 565.894737 592.842105h134.736842v53.894737h-134.736842c-74.293895 0-134.736842 60.442947-134.736842 134.736842v26.516211l-53.894737 0.377263V781.473684c0-9.162105 0.646737-18.135579 1.913263-26.947368H350.315789c-14.848 0-26.947368 12.072421-26.947368 26.947368 0 19.725474 36.675368 77.473684 92.133053 134.736842H431.157895v53.894737h-53.894737c-37.672421 0-53.894737 40.906105-53.894737 53.894737z" fill="#231F20" ></path></symbol><symbol id="icon-horse_wu" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#FF8787" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 26.947368h269.473685v-53.894736H538.947368v-161.684211h161.684211v-53.894737H411.001263c12.045474-33.28 20.156632-69.793684 20.156632-107.789473h-53.894737c0 121.963789-105.364211 233.391158-106.415158 234.496l38.858105 37.349052c2.883368-3.018105 43.816421-46.133895 77.392842-110.160842H485.052632v161.684211H215.578947v53.894736h269.473685v323.368421h53.894736V538.947368z" fill="#231F20" ></path></symbol><symbol id="icon-ox" viewBox="0 0 1025 1024"><path d="M540.294737 754.526316h215.578947c20.210526 0 35.112421 1.374316 53.894737 4.581052 91.863579 15.656421 145.354105 67.691789 161.684211 86.069895V916.210526h53.894736V635.580632l-7.895579-7.895579c-9.269895-9.269895-36.513684-49.232842-44.032-196.527158H540.294737a161.684211 161.684211 0 0 0-161.684211 161.68421v131.098948c43.304421 20.210526 97.28 30.585263 161.684211 30.585263z" fill="#FFAF6E" ></path><path d="M1025.347368 635.580632V916.210526h-53.894736v-71.033263c-16.330105-18.405053-69.820632-70.413474-161.684211-86.069895V916.210526h-53.894737v-161.68421h-107.789473v215.578947h-53.894737V700.631579h161.68421c100.998737 0 172.570947 38.669474 215.578948 71.868632v-115.738948c-33.684211-43.627789-51.712-137.458526-53.706106-279.498105H701.978947c-76.934737 0-127.218526-26.219789-175.804631-51.550316a1556.048842 1556.048842 0 0 0-26.839579-13.743158c-26.839579 26.004211-66.209684 44.921263-115.738948 55.511579 24.441263 22.986105 60.874105 52.116211 106.469053 72.838737l-22.312421 49.044211c-76.584421-34.816-129.589895-88.926316-150.824421-113.125053-10.644211 0.619789-21.477053 1.024-32.687158 1.024a473.734737 473.734737 0 0 1-123.365053-15.952842l-93.022315 186.314105 68.581052 53.86779C167.882105 579.557053 237.891368 538.947368 324.715789 538.947368v53.894737c-95.986526 0-170.361263 62.490947-171.088842 63.137684l-16.78821 14.282106-136.838737-107.358316 109.729684-219.809684C46.430316 314.448842 1.347368 267.371789 1.347368 199.868632 1.347368 89.815579 121.586526 53.894737 163.031579 53.894737v53.894737c-14.120421 0-107.789474 17.165474-107.789474 92.079158C55.242105 290.465684 192.188632 323.368421 284.240842 323.368421c67.907368 0 122.421895-12.988632 157.696-35.624421-42.711579-14.336-95.097263-23.120842-169.337263-18.324211l-3.503158-53.786947c95.878737-6.117053 160.148211 8.515368 211.429053 28.833684C484.244211 235.439158 486.4 225.818947 486.4 215.578947c0-48.855579-57.829053-76.288-58.394947-76.557473l22.393263-49.017263C454.063158 91.648 540.294737 131.826526 540.294737 215.578947c0 18.566737-3.422316 35.84-9.997474 51.631158 7.060211 3.584 13.985684 7.168 20.776421 10.698106C597.854316 302.322526 638.248421 323.368421 701.978947 323.368421h269.473685v26.947368c0 214.689684 35.220211 266.590316 45.999157 277.369264l7.895579 7.895579z m-729.384421 25.141894l-98.789052 118.541474 86.797473 137.835789 45.594948-28.725894-65.913263-104.690527 37.052631-44.43621C358.642526 785.192421 439.080421 808.421053 540.294737 808.421053v-53.894737c-99.893895 0-175.077053-24.549053-223.474526-72.946527l-20.857264-20.857263z" fill="#231F20" ></path></symbol><symbol id="icon-rabbit_mao" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#7DD47F" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-377.263158-188.631579h107.789474v323.368421c-20.48 0-39.936-11.264-40.016842-11.317895l-27.728842 46.214737c3.206737 1.940211 32.660211 18.997895 67.745684 18.997895 30.746947 0 53.894737-23.147789 53.894737-53.894737V269.473684h-215.578948v538.947369h53.894737V323.368421z m-107.789473 242.526316v-242.526316h-53.894737v196.904421l-107.789474 40.421053v-243.927579l169.094737-48.316632-14.821053-51.819789L269.473684 276.102737v304.801684l-36.405895 13.662316 18.917053 50.472421 178.741895-67.018105c-5.039158 69.928421-55.269053 106.981053-165.133474 122.933894l7.733895 53.328842C325.712842 746.657684 485.052632 723.536842 485.052632 565.894737z" fill="#231F20" ></path></symbol><symbol id="icon-rabbit" viewBox="0 0 1024 1024"><path d="M680.96 488.744421a1666.667789 1666.667789 0 0 0-54.433684-23.95621c-16.006737 12.234105-33.899789 20.264421-60.631579 20.264421h-80.842105c-36.810105 0-83.644632 30.396632-104.394106 67.772631-42.819368 77.123368-53.409684 117.813895-11.021473 201.701053C397.096421 808.879158 431.157895 876.409263 431.157895 970.105263h338.539789l68.338527-138.859789c20.129684-40.96 24.252632-73.701053 24.252631-110.349474 0.026947-57.397895-25.061053-159.717053-181.328842-232.151579z" fill="#FFBDD8" ></path><path d="M862.315789 720.896c0 36.621474-4.122947 69.389474-24.252631 110.349474L769.697684 970.105263H485.052632v-53.894737h48.370526C507.877053 880.074105 485.052632 833.509053 485.052632 781.473684c0-59.418947 24.171789-113.313684 63.218526-152.360421l38.103579 38.103579A161.091368 161.091368 0 0 0 538.947368 781.473684c0 54.784 35.381895 104.043789 63.514948 134.736842h133.712842l53.490526-108.759579c15.710316-31.851789 18.755368-55.834947 18.755369-86.554947 0-80.976842-63.434105-150.096842-178.607158-195.503158-17.542737 8.138105-38.292211 13.554526-63.919158 13.554526h-80.842105c-13.958737 0-43.924211 15.979789-57.290106 40.016843l-47.104-26.165895C401.408 515.449263 448.242526 485.052632 485.052632 485.052632h80.842105c37.268211 0 57.478737-15.440842 79.090526-36.45979C625.367579 336.195368 549.753263 269.473684 485.052632 269.473684h-107.789474a21.288421 21.288421 0 0 0-5.955369 2.021053A683.762526 683.762526 0 0 0 302.187789 194.021053c-35.84-34.223158-61.763368-58.933895-94.908631-79.440842A42.442105 42.442105 0 0 0 185.478737 107.789474a22.824421 22.824421 0 0 0-17.381053 7.194947c-10.913684 11.425684-6.063158 28.240842 1.428211 39.181474 21.989053 32.121263 47.912421 56.858947 83.752421 91.109052 20.614737 19.671579 49.259789 43.169684 77.392842 63.08379C281.007158 367.400421 215.578947 484.432842 215.578947 592.842105c0 74.482526 24.791579 124.065684 51.065264 176.586106C294.534737 825.209263 323.368421 882.903579 323.368421 970.105263h-53.894737c0-74.482526-24.791579-124.065684-51.065263-176.586105C190.517895 737.738105 161.684211 680.043789 161.684211 592.842105c0-90.866526 42.226526-197.685895 93.453473-274.485894a803.759158 803.759158 0 0 1-39.046737-34.115369C177.852632 247.754105 150.231579 221.399579 125.035789 184.616421c-24.441263-35.759158-22.797474-78.686316 4.069053-106.819368 26.300632-27.567158 70.898526-31.043368 106.522947-9.000421 37.941895 23.444211 65.562947 49.798737 103.774316 86.258526 9.970526 9.512421 33.037474 32.309895 56.93979 60.550737h68.634947c-27.621053-37.780211-60.416-72.730947-88.522105-99.543579-28.833684-27.540211-54.730105-52.116211-84.533895-74.024421L326.305684 0.296421c31.232 23.228632 57.802105 48.532211 87.309474 76.719158 53.840842 51.388632 94.450526 100.594526 121.74821 146.83621 82.836211 26.650947 150.042947 116.870737 165.025685 230.750316l1.724631 13.177263-9.404631 9.404632c-3.772632 3.772632-7.706947 7.653053-11.802948 11.587368C837.227789 561.178947 862.315789 663.498105 862.315789 720.896zM309.463579 754.526316c3.934316 8.057263 7.895579 16.087579 11.991579 24.144842C348.887579 832.970105 377.263158 889.128421 377.263158 970.105263h53.894737c0-93.696-34.061474-161.226105-61.520842-215.578947h-60.173474z m597.90821 53.894737c-3.422316 9.404632-7.814737 19.806316-13.770105 31.959579L829.790316 970.105263h60.065684l52.143158-105.957052c10.778947-21.935158 17.515789-40.016842 21.90821-55.727158h-56.535579zM514.694737 390.736842c0-34.223158-13.231158-44.463158-29.642105-44.463158s-29.642105 10.24-29.642106 44.463158c0 34.250105 13.231158 44.463158 29.642106 44.463158s29.642105-10.213053 29.642105-44.463158z" fill="#231F20" ></path></symbol><symbol id="icon-rat_zi" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#85C3DE" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 188.631579v-215.578947h269.473685v-53.894737H538.947368v-39.585684c26.543158-18.081684 94.585263-65.050947 177.852632-127.488L700.631579 215.578947H323.368421v53.894737h295.316211a4221.008842 4221.008842 0 0 1-121.640421 85.369263l-11.991579 8.003369V431.157895H242.526316v53.894737h242.526316v215.578947c0 48.343579-13.850947 53.894737-134.736843 53.894737v53.894737c105.391158 0 188.631579 0 188.631579-107.789474z" fill="#231F20" ></path></symbol><symbol id="icon-rat" viewBox="0 0 1024 1024"><path d="M727.659789 431.157895c-132.581053 0-220.348632 47.454316-285.803789 154.354526-19.779368 32.309895-15.845053 76.503579-9.404632 96.579368 3.260632 10.159158 7.760842 18.647579 12.422737 25.546106C464.761263 737.010526 499.927579 754.526316 538.947368 754.526316h66.829474c1.158737 17.893053-1.967158 34.762105-15.144421 53.975579-12.692211 18.539789-37.807158 40.151579-56.32 54.810947 25.249684-0.673684 52.709053-0.997053 83.240421-0.997053C877.487158 862.315789 970.105263 711.922526 970.105263 571.176421 936.421053 512 882.364632 431.157895 727.659789 431.157895z" fill="#85C3DE" ></path><path d="M210.432 1012.897684l-43.573895-31.690105c106.954105-147.051789 185.317053-171.196632 423.828211-172.705684 21.396211-31.258947 16.249263-56.266105 9.377684-89.70779-3.557053-17.138526-7.221895-34.842947-7.221895-54.433684 0-68.958316 25.330526-104.636632 63.407158-136.973474l34.896842 41.040842c-29.453474 25.061053-44.409263 46.780632-44.409263 95.932632 0 14.093474 2.937263 28.402526 6.063158 43.546947 5.901474 28.510316 12.8 62.032842-1.131789 99.462737 166.373053-10.24 264.542316-96.902737 264.542315-236.193684C916.210526 418.330947 827.580632 323.368421 684.921263 323.368421c-83.644632 0-153.303579 29.696-174.187789 39.612632a224.875789 224.875789 0 0 1-20.533895 31.339789l-41.741474-34.115368 20.884211 17.057684-20.911158-16.976842C448.781474 359.828211 485.052632 314.287158 485.052632 262.736842c0-34.816-8.946526-60.766316-26.570106-77.069474-17.515789-16.249263-44.786526-24.602947-81.219368-24.953263V323.368421h-53.894737V109.783579l24.872421-1.913263c64.700632-4.931368 114.095158 7.895579 146.863158 38.238316C524.207158 173.056 538.947368 212.291368 538.947368 262.736842c0 11.102316-1.131789 21.908211-3.072 32.202105 37.268211-12.584421 89.842526-25.465263 149.045895-25.465263C858.165895 269.473684 970.105263 387.907368 970.105263 571.176421 970.105263 711.922526 877.487158 862.315789 617.552842 862.315789c-258.667789 0-311.942737 19.698526-407.120842 150.581895z m19.105684-256.835368c-12.045474 0-24.387368-0.565895-37.025684-1.64379l-22.096842-1.859368-2.425263-22.016C167.747368 728.144842 161.684211 672.444632 161.684211 631.026526c0-103.585684 21.450105-178.903579 53.894736-259.045052V107.789474h53.894737v274.782315l-2.021052 4.904422C235.439158 465.758316 215.578947 533.800421 215.578947 631.026526c0 22.878316 2.101895 51.442526 3.826527 70.979369 99.678316 2.802526 172.813474-35.408842 222.450526-116.493474l48.020211 24.090947c-11.237053 28.133053-11.371789 51.577263-0.377264 67.853474 9.701053 14.282105 28.645053 23.174737 49.448421 23.174737v53.894737c-39.019789 0-74.186105-17.515789-94.073263-46.888421a100.244211 100.244211 0 0 1-12.422737-25.546106c-53.221053 49.178947-121.128421 73.943579-202.913684 73.970527zM379.957895 525.473684c0-34.223158-13.231158-44.463158-29.642106-44.463158s-29.642105 10.24-29.642105 44.463158c0 34.250105 13.231158 44.463158 29.642105 44.463158s29.642105-10.213053 29.642106-44.463158z" fill="#231F20" ></path></symbol><symbol id="icon-rooster_you" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#BBC4C9" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-215.578947-188.631579h-161.684211v-26.947368h161.684211V242.526316H269.473684v53.894737h161.684211v26.947368h-161.684211v485.052632h53.894737v-53.894737h377.263158v53.894737h53.894737V323.368421zM323.368421 646.736842h377.263158v53.894737H323.368421v-53.894737z m0-269.473684h107.789474c0 103.316211-72.784842 107.654737-81.084632 107.789474L350.315789 538.947368c46.592 0 134.736842-33.792 134.736843-161.68421h53.894736v107.789474c0 29.722947 24.171789 53.894737 53.894737 53.894736h107.789474v53.894737H323.368421v-215.578947z m377.263158 0v107.789474h-107.789474v-107.789474h107.789474z m-215.578947-80.842105h53.894736v26.947368h-53.894736v-26.947368z" fill="#231F20" ></path></symbol><symbol id="icon-rooster" viewBox="0 0 1024 1024"><path d="M891.688421 506.421895C877.244632 455.033263 862.315789 401.893053 862.315789 323.368421V116.224l-323.368421 195.745684V323.368421c0 78.524632 14.928842 131.664842 29.372632 183.053474 12.611368 44.894316 24.522105 87.282526 24.522105 140.314947 0 101.618526-77.931789 176.693895-168.286316 203.991579l5.416422 11.587368h215.578947c24.333474 0 43.385263-0.242526 58.556631-2.128842C811.52 846.821053 916.210526 764.550737 916.210526 646.736842c0-53.032421-11.910737-95.420632-24.522105-140.314947z" fill="#FF8787" ></path><path d="M673.684211 354.357895c-16.384 0-29.642105-10.213053-29.642106-44.463158 0-34.223158 13.231158-44.463158 29.642106-44.463158s29.642105 10.24 29.642105 44.463158c0 34.250105-13.258105 44.463158-29.642105 44.463158zM540.106105 970.105263l-50.58021-107.789474h156.05221l50.607158 107.789474h59.553684l-51.60421-109.918316C811.52 846.821053 916.210526 764.550737 916.210526 646.736842c0-53.032421-11.910737-95.420632-24.522105-140.314947C877.244632 455.033263 862.315789 401.893053 862.315789 323.368421V107.789474c0-59.445895-48.343579-107.789474-107.789473-107.789474a107.924211 107.924211 0 0 0-107.789474 106.172632 100.890947 100.890947 0 0 0-24.117895-3.314527 88.710737 88.710737 0 0 0-88.602947 88.602948c0 20.668632 5.227789 39.720421 10.671158 53.921684l-99.489684 59.688421 93.749894 14.470737V377.263158c0 14.416842-5.901474 21.692632-33.360842 49.152l-11.129263 11.129263C398.228211 326.521263 324.985263 269.473684 215.740632 269.473684 96.768 269.473684 0 366.241684 0 485.214316V646.736842h53.894737v-161.522526A162.007579 162.007579 0 0 1 215.740632 323.368421c82.081684 0 140.422737 36.244211 240.64 152.252632l-38.615579 38.615579C367.804632 461.285053 323.098947 431.157895 259.584 431.157895A151.983158 151.983158 0 0 0 107.789474 582.952421V754.526316h53.894737v-171.573895A98.007579 98.007579 0 0 1 259.584 485.052632c46.322526 0 79.629474 20.911158 137.027368 86.016l18.970948 21.530947 128.080842-128.080842C572.200421 435.981474 592.842105 415.366737 592.842105 377.263158v-97.926737l23.309474-14.120421-13.662316-23.04c-0.161684-0.242526-14.578526-24.899368-14.578526-50.688 0-19.132632 15.575579-34.708211 34.70821-34.708211 5.093053 0 26.785684 3.179789 39.558737 18.647579l26.327579 46.026106 39.774316-24.090948-20.372211-49.367579C704.754526 140.449684 700.631579 117.517474 700.631579 107.789474c0-29.722947 24.171789-53.894737 53.894737-53.894737s53.894737 24.171789 53.894737 53.894737v215.578947c0 85.935158 16.680421 145.300211 31.366736 197.632C851.887158 564.008421 862.315789 601.141895 862.315789 646.736842c0 95.285895-99.408842 161.684211-188.631578 161.684211h-209.461895l-68.419369-145.704421C375.242105 618.954105 338.108632 592.842105 296.448 592.842105A80.976842 80.976842 0 0 0 215.578947 673.711158V862.315789h53.894737v-188.604631c0-14.874947 12.099368-26.974316 26.974316-26.974316 20.533895 0 38.965895 14.147368 50.553263 38.858105L480.579368 970.105263h59.526737z" fill="#231F20" ></path></symbol><symbol id="icon-snake_si" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#FF8787" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-242.041263 180.762947l-52.116211-13.797052C657.219368 749.864421 651.425684 754.526316 619.789474 754.526316h-242.526316V485.052632h269.473684v53.894736h53.894737V215.578947H323.368421v538.947369c0 29.722947 24.171789 53.894737 53.894737 53.894737h242.526316c77.689263 0 91.189895-51.065263 108.274526-115.658106zM377.263158 269.473684h269.473684v161.684211H377.263158v-161.684211z" fill="#231F20" ></path></symbol><symbol id="icon-tiger_yin" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#7DD47F" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-257.42821 299.250526l-107.789474-53.894737-24.117895 48.208843 107.789474 53.894736 24.117895-48.208842z m-269.473685-5.658947l-24.117894-48.208842-107.789474 53.894737 24.117895 48.208842 107.789473-53.894737zM700.631579 431.157895h-161.684211v-53.894737h107.789474v-53.894737H377.263158v53.894737h107.789474v53.894737h-161.684211v323.368421h53.894737v-53.894737h269.473684v53.894737h53.894737V431.157895z m-161.684211 161.68421h107.789474v53.894737h-107.789474v-53.894737z m-161.68421 0h107.789474v53.894737h-107.789474v-53.894737z m161.68421-107.789473h107.789474v53.894736h-107.789474v-53.894736z m-161.68421 0h107.789474v53.894736h-107.789474v-53.894736zM754.526316 215.578947h-223.097263l-20.803369-62.410105-51.119158 17.057684L474.624 215.578947H269.473684v107.789474h53.894737v-53.894737h377.263158v53.894737h53.894737V215.578947z" fill="#231F20" ></path></symbol><symbol id="icon-snake" viewBox="0 0 1024 1024"><path d="M107.789474 790.474105c0-72.434526 67.880421-91.513263 121.451789-91.513263 74.401684 0 153.815579 34.438737 237.891369 70.925474 50.580211 21.935158 104.609684 45.325474 162.250105 63.083789-52.412632 44.786526-118.784 74.347789-195.152842 83.078737-143.171368 16.357053-326.440421 7.006316-326.440421-125.574737zM377.263158 215.578947c-15.575579 0-30.288842 3.449263-43.654737 9.377685A250.691368 250.691368 0 0 0 323.368421 296.421053c0 115.550316 76.422737 169.391158 137.83579 212.614736 8.138105 5.712842 16.141474 11.371789 23.848421 17.057685V323.368421a107.789474 107.789474 0 0 0-107.789474-107.789474z" fill="#C3D686" ></path><path d="M671.528421 788.857263c44.328421 11.964632 89.626947 19.563789 136.892632 19.56379 89.168842 0 161.684211-60.442947 161.68421-134.736842s-72.515368-134.736842-161.68421-134.736843c-19.078737 0-37.025684 1.509053-54.218106 4.015158-0.754526-101.402947-38.211368-172.355368-79.413894-219.648L673.684211 323.368421a1749.962105 1749.962105 0 0 1-79.036632-1.751579c45.702737 35.866947 108.705684 107.870316 105.984 232.367158 0 0.431158-0.080842 0.808421-0.10779 1.239579-34.923789 10.994526-66.155789 26.731789-95.097263 45.190737a163.085474 163.085474 0 0 0-15.845052-42.388211c-21.557895-39.639579-60.065684-66.775579-97.360842-93.022316C433.098105 423.343158 377.263158 384 377.263158 296.421053c0-130.290526 108.274526-188.631579 215.578947-188.631579 64.134737 0 132.715789 12.045474 214.366316 37.807158C802.330947 180.250947 780.099368 209.381053 700.631579 214.635789V161.684211h-53.894737v53.679157c-63.272421-1.024-104.528842-5.200842-104.986947-5.254736l-5.578106 53.598315C538.408421 263.949474 592.357053 269.473684 673.684211 269.473684c125.170526 0 188.631579-48.128 188.631578-143.063579V106.981053l-18.432-6.144C747.789474 68.823579 668.025263 53.894737 592.842105 53.894737c-158.666105 0-269.473684 99.732211-269.473684 242.526316 0 115.550316 76.422737 169.391158 137.83579 212.614736 33.684211 23.713684 65.509053 46.106947 81.003789 74.698106 9.539368 17.542737 13.285053 33.414737 12.341895 47.750737 21.153684 9.108211 42.118737 17.839158 62.949052 25.977263C671.151158 620.193684 729.977263 592.842105 808.421053 592.842105c59.445895 0 107.789474 36.271158 107.789473 80.842106s-48.343579 80.842105-107.789473 80.842105c-105.472 0-203.237053-42.388211-297.768421-83.429053-94.800842-41.094737-184.346947-79.952842-281.411369-79.952842C122.718316 591.171368 53.894737 644.715789 53.894737 727.578947c0 79.063579 67.098947 136.434526 159.555368 136.434527 142.174316 0 230.426947-66.883368 306.79579-129.886316 31.420632 13.419789 62.787368 26.058105 94.450526 37.133474-47.077053 49.637053-110.969263 82.566737-186.610526 91.270736l5.066105 53.625264c93.453474-7.006316 143.144421 9.350737 195.718737 26.543157 46.457263 15.225263 94.127158 30.854737 169.822316 30.854737 19.994947 0 41.957053-1.077895 66.344421-3.557052l-5.416421-53.625263c-105.283368 10.778947-158.100211-6.548211-213.935158-24.872422-22.150737-7.275789-44.624842-14.632421-70.305684-20.345263a334.848 334.848 0 0 0 96.14821-82.297263z m-458.078316 21.261474C162.573474 810.118737 107.789474 784.276211 107.789474 727.578947c0-60.847158 62.733474-82.539789 121.451789-82.539789 77.850947 0 154.731789 30.288842 235.250526 64.943158-66.263579 52.924632-139.722105 100.136421-251.041684 100.136421z" fill="#231F20" ></path></symbol><symbol id="icon-tiger" viewBox="0 0 1024 1024"><path d="M431.157895 162.250105V134.736842c0-41.552842-39.289263-80.842105-80.842106-80.842105-28.833684 0-57.128421 4.661895-58.314105 4.850526L269.473684 62.490947v83.887158C144.788211 223.824842 89.222737 346.839579 66.991158 431.157895h266.051368c240.747789 0 415.851789 107.789474 415.85179 269.473684-14.848-25.114947-43.924211-53.894737-88.68379-53.894737-67.988211 0-121.263158 71.033263-121.263158 161.684211 0 66.802526 30.477474 119.888842 60.712421 156.16 12.638316 15.171368 36.055579 37.726316 59.014737 58.88 5.066105 0.107789 9.781895 0.538947 15.009685 0.538947 219.297684 0 350.315789-191.811368 350.315789-377.263158C1024 327.545263 679.855158 172.813474 431.157895 162.250105z" fill="#F7C768" ></path><path d="M673.684211 1024c-114.768842 0-188.820211-33.333895-254.167579-62.787368-53.625263-24.144842-99.974737-45.002105-161.28-45.002106-40.448 0-83.590737 23.255579-103.639579 45.16379l-39.747369-36.432842C142.497684 894.787368 199.168 862.315789 258.236632 862.315789c68.392421 0 119.861895 21.288421 172.921263 45.056V673.684211c0-35.166316-17.542737-64.107789-30.639158-80.815158-15.198316 9.835789-32.067368 18.890105-50.741895 26.947368l-21.342316-49.475368C469.800421 509.413053 485.052632 377.317053 485.052632 323.368421V221.642105A597.827368 597.827368 0 0 0 404.210526 215.578947h-26.947368V134.736842c0-12.099368-14.848-26.947368-26.947369-26.947368-9.377684 0-18.836211 0.592842-26.947368 1.347368V269.473684h-53.894737V211.671579c-136.030316 102.912-158.450526 266.886737-161.306947 295.882105 9.135158 9.108211 38.992842 25.061053 71.976421 38.669474l38.103579-59.365053 12.449684-1.589894C321.212632 473.653895 377.263158 392.192 377.263158 323.368421h53.894737c0 88.333474-68.796632 192.242526-180.870737 213.342316l-48.397474 75.398737-20.291368-7.437474C53.894737 557.756632 53.894737 523.317895 53.894737 512c0-50.041263 37.025684-254.733474 215.578947-365.621895V62.490947l22.528-3.745684C293.187368 58.556632 321.482105 53.894737 350.315789 53.894737c41.552842 0 80.842105 39.289263 80.842106 80.842105v27.513263c248.697263 10.563368 592.842105 165.295158 592.842105 484.486737 0 185.451789-131.018105 377.263158-350.315789 377.263158z m-13.473685-323.368421c-36.513684 0-67.368421 49.367579-67.368421 107.789474 0 85.746526 68.096 145.084632 89.465263 161.549473 91.540211-2.533053 164.378947-45.487158 213.827369-107.654737H700.631579v-53.894736h230.238316c8.919579-17.273263 16.357053-35.354947 22.285473-53.894737h-239.885473l-6.467369-17.650527C706.290526 735.582316 692.439579 700.631579 660.210526 700.631579zM485.052632 931.112421c33.926737 14.066526 70.521263 26.597053 114.607157 33.468632C569.424842 928.309895 538.947368 875.223579 538.947368 808.421053c0-90.650947 53.274947-161.684211 121.263158-161.684211 44.759579 0 73.835789 28.779789 88.68379 53.894737h217.007158c2.775579-17.866105 4.203789-35.920842 4.203789-53.894737 0-38.938947-5.658947-74.752-15.925895-107.627789l-126.706526 126.679579-38.103579-38.103579L932.001684 485.052632a367.939368 367.939368 0 0 0-57.775158-81.596632l-154.543158 154.543158-38.103579-38.103579 153.573053-153.573053a537.869474 537.869474 0 0 0-82.593684-56.751158l-140.665263 140.638316-38.103579-38.103579 128.134737-128.134737A794.731789 794.731789 0 0 0 538.947368 231.046737V323.368421c0 50.149053-11.102316 156.698947-95.932631 236.328421 18.378105 23.417263 42.037895 63.407158 42.037895 113.987369v257.42821zM215.578947 431.157895v-53.894737c39.774316 0 53.894737-29.022316 53.894737-53.894737h53.894737c0 53.571368-37.025684 107.789474-107.789474 107.789474z" fill="#231F20" ></path></symbol><symbol id="icon-boar" viewBox="0 0 1024 1024"><path d="M732.079158 377.263158c-107.789474 0-186.421895 31.393684-281.869474 126.841263L180.331789 773.982316C257.724632 807.909053 348.725895 808.421053 485.052632 808.421053h96.013473c55.834947-34.411789 133.551158-53.894737 227.354948-53.894737h121.344L970.105263 680.555789V572.631579c0-94.315789-130.236632-195.368421-238.026105-195.368421z" fill="#FFBDD8" ></path><path d="M808.421053 700.631579v53.894737c-196.446316 0-323.368421 84.641684-323.368421 215.578947h-53.894737c0-163.705263 148.075789-269.473684 377.263158-269.473684z m-323.368421 107.789474v-53.894737c-158.342737 0-245.598316 0-319.649685-49.367579L158.612211 700.631579H80.842105c-21.692632 0-26.624-14.821053-26.947368-26.947368v-82.620632c84.156632-11.183158 161.684211-74.913684 161.68421-186.853053V215.578947H161.684211v161.684211H134.736842c-66.964211 0-134.736842 37.025684-134.736842 107.789474h53.894737c0-42.630737 52.870737-53.894737 80.842105-53.894737h24.629895C147.132632 504.912842 85.153684 538.947368 26.947368 538.947368H0v134.736843c0 32.498526 21.530947 80.842105 80.842105 80.842105h61.682527c32.687158 20.506947 67.125895 33.145263 105.957052 41.013895A232.879158 232.879158 0 0 0 215.578947 916.210526h53.894737c0-41.930105 14.012632-80.303158 39.424-112.505263C358.885053 808.151579 415.959579 808.421053 485.052632 808.421053z m-72.946527-342.420211L323.368421 554.738526V431.157895h-53.894737v253.682526l180.736-180.736-38.103579-38.103579zM323.368421 161.684211h-53.894737v190.032842a769.536 769.536 0 0 1 53.894737-49.098106V161.684211z m323.368421-53.894737c-72.623158 0-146.809263 23.336421-215.578947 58.637473V107.789474h-53.894737v154.138947C458.832842 205.392842 555.331368 161.684211 646.736842 161.684211c148.587789 0 269.473684 120.885895 269.473684 269.473684v235.654737L809.579789 862.315789h61.359158L970.105263 680.555789V431.157895c0-178.310737-145.057684-323.368421-323.368421-323.368421z" fill="#231F20" ></path></symbol><symbol id="icon-boar_hai" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#85C3DE" ></path><path d="M309.975579 804.756211l-27.136-46.592c103.073684-60.011789 183.026526-132.473263 241.475368-219.24379H350.315789l-13.473684-50.283789c58.88-33.980632 99.435789-117.571368 118.703158-165.295158H242.526316v-53.894737h538.947368v53.894737h-268.18021c-12.395789 34.088421-42.469053 106.603789-90.435369 161.68421h134.009263a680.555789 680.555789 0 0 0 46.349474-107.708631l51.092211 17.057684c-58.421895 175.265684-171.034947 309.490526-344.333474 410.381474z m192.350316-2.937264L467.806316 760.454737c88.414316-73.728 154.516211-158.773895 202.105263-259.907369l48.801684 22.959158a797.372632 797.372632 0 0 1-82.351158 137.781895c32.741053 15.009684 83.456 44.867368 137.647158 101.591579l-38.938947 37.268211c-57.236211-59.877053-109.325474-85.557895-133.766737-95.178106a850.997895 850.997895 0 0 1-98.977684 96.848842z m48.613052-536.872421l-80.842105-53.894737 29.884632-44.840421 80.842105 53.894737-29.884632 44.840421zM512 53.894737C259.395368 53.894737 53.894737 259.395368 53.894737 512s205.500632 458.105263 458.105263 458.105263c9.081263 0 17.973895-0.835368 26.947368-1.374316v-53.894736c-8.946526 0.619789-17.866105 1.374316-26.947368 1.374315-222.881684 0-404.210526-181.328842-404.210526-404.210526S289.118316 107.789474 512 107.789474s404.210526 181.328842 404.210526 404.210526c0 195.206737-139.075368 358.507789-323.368421 396.045474v54.460631c214.096842-38.346105 377.263158-225.549474 377.263158-450.533052C970.105263 259.395368 764.604632 53.894737 512 53.894737z" fill="#231F20" ></path></symbol><symbol id="icon-bilibili1" viewBox="0 0 1129 1024"><path d="M234.909 9.656a80.468 80.468 0 0 1 68.398 0 167.374 167.374 0 0 1 41.843 30.578l160.937 140.82h115.07l160.936-140.82a168.983 168.983 0 0 1 41.843-30.578A80.468 80.468 0 0 1 930.96 76.445a80.468 80.468 0 0 1-17.703 53.914 449.818 449.818 0 0 1-35.406 32.187 232.553 232.553 0 0 1-22.531 18.508h100.585a170.593 170.593 0 0 1 118.289 53.109 171.397 171.397 0 0 1 53.914 118.288v462.693a325.897 325.897 0 0 1-4.024 70.007 178.64 178.64 0 0 1-80.468 112.656 173.007 173.007 0 0 1-92.539 25.75H212.377a341.186 341.186 0 0 1-72.421-4.024A177.835 177.835 0 0 1 28.91 939.065a172.202 172.202 0 0 1-27.36-92.539V388.662a360.498 360.498 0 0 1 0-66.789A177.03 177.03 0 0 1 162.487 178.64h105.414c-16.899-12.07-31.383-26.555-46.672-39.43a80.468 80.468 0 0 1-25.75-65.984 80.468 80.468 0 0 1 39.43-63.57M216.4 321.873a80.468 80.468 0 0 0-63.57 57.937 108.632 108.632 0 0 0 0 30.578v380.615a80.468 80.468 0 0 0 55.523 80.469 106.218 106.218 0 0 0 34.601 5.632h654.208a80.468 80.468 0 0 0 76.444-47.476 112.656 112.656 0 0 0 8.047-53.109v-354.06a135.187 135.187 0 0 0 0-38.625 80.468 80.468 0 0 0-52.304-54.719 129.554 129.554 0 0 0-49.89-7.242H254.22a268.764 268.764 0 0 0-37.82 0z m0 0" fill="#20B0E3" ></path><path d="M348.369 447.404a80.468 80.468 0 0 1 55.523 18.507 80.468 80.468 0 0 1 28.164 59.547v80.468a80.468 80.468 0 0 1-16.094 51.5 80.468 80.468 0 0 1-131.968-9.656 104.609 104.609 0 0 1-10.46-54.719v-80.468a80.468 80.468 0 0 1 70.007-67.593z m416.02 0a80.468 80.468 0 0 1 86.102 75.64v80.468a94.148 94.148 0 0 1-12.07 53.11 80.468 80.468 0 0 1-132.773 0 95.757 95.757 0 0 1-12.875-57.133V519.02a80.468 80.468 0 0 1 70.007-70.812z m0 0" fill="#20B0E3" ></path></symbol><symbol id="icon-yinle" viewBox="0 0 1024 1024"><path d="M512.2976 0a531.2 531.2 0 0 0-512 548.48V960h128V548.48a398.72 398.72 0 0 1 384-411.52 398.72 398.72 0 0 1 384 411.52V960h128V548.48A531.2 531.2 0 0 0 512.2976 0z" fill="#5c8add" ></path><path d="M64.2976 576l256 0 0 448-256 0 0-448Z" fill="#5c8add" ></path><path d="M704.2976 576l256 0 0 448-256 0 0-448Z" fill="#5c8add" ></path></symbol><symbol id="icon-icon-test-copy" viewBox="0 0 1024 1024"><path d="M512 512m-229.517241 0a229.517241 229.517241 0 1 0 459.034482 0 229.517241 229.517241 0 1 0-459.034482 0Z" fill="#5c8add" ></path><path d="M512 1024A512 512 0 1 1 1024 512 512 512 0 0 1 512 1024z m0-141.241379A370.758621 370.758621 0 1 0 141.241379 512 370.758621 370.758621 0 0 0 512 882.758621z" fill="#5c8add" ></path></symbol><symbol id="icon-V" viewBox="0 0 1024 1024"><path d="M1012.47774251 492.58192592L544.94137566 87.22962963a49.96686561 49.96686561 0 0 0-65.88275132 0L11.63784127 492.6975097c-21.03624691 18.26223633-23.3479224 49.93219048-5.08568606 70.96843739 18.03106878 21.03624691 49.93219048 23.3479224 70.96843738 5.08568607L512 191.83294532l434.71057495 376.91868784c9.47786949 8.20644797 21.26741446 12.25188008 32.82579189 12.13629629 14.10122046 0 27.97127337-5.77918871 38.02706173-17.33756613 18.14665256-20.92066314 15.95056084-52.70620106-5.08568606-70.9684374z" fill="#5c8add" ></path><path d="M109.30613051 567.59579541V896.89396825c0 42.53482892 34.90629982 77.44112875 77.44112875 77.44112875h220.76500882V666.30433862c0-25.54401411 20.92066314-46.46467725 46.46467724-46.46467724h116.16169313c25.54401411 0 46.46467725 20.92066314 46.46467725 46.46467724V974.335097h220.76500882c42.53482892 0 77.44112875-34.90629982 77.44112874-77.44112875l0.11558377-329.29817284L512 218.18604586 109.30613051 567.59579541zM848.00203175 197.49655027h-63.91782716c-12.82979894 0-23.23233862 10.40253968-23.23233863 23.23233862v24.27259259l110.49808818 95.70336508V220.72888889h-0.11558377c0-12.82979894-10.40253968-23.23233862-23.23233862-23.23233862zM905.44716754 83.18419754s-34.90629982 56.86721693-89.11508994 100.32671603c152.68616579 13.98563668 127.83565432-133.26809171 127.83565432-133.2680917-134.07717813-10.28695591-132.92134039 102.29164021-131.072 127.83565432 20.92066314-20.92066314 49.70102293-62.64640564 92.35143562-94.89427865zM798.53217637 174.61096297c-19.64924162-16.52847972-40.56990476-43.45949912-51.203612-53.97762258 0 0 32.94137566 20.57391182 56.40488184 49.3542716 2.42725926-18.37782011 6.47269135-93.3916896-93.16052205-85.3008254 0 0-13.98563668 104.71889947 87.95925221 89.92417638z" fill="#5c8add" ></path></symbol><symbol id="icon-zhifeiji" viewBox="0 0 1167 1024"><path d="M41.201759 463.52493L1110.665064 30.117647c10.32605-4.159104 21.942857 0.860504 26.101961 11.043137 1.434174 3.728852 1.864426 7.744538 1.003921 11.616807L949.033691 978.823529c-2.151261 10.89972-12.764146 17.927171-23.663865 15.632493-2.72493-0.573669-5.306443-1.721008-7.601121-3.298599L634.80624 789.79944l-163.065546 133.951821c-16.492997 13.62465-40.87395 11.186555-54.498599-5.306443-3.011765-3.728852-5.306443-7.887955-6.884034-12.477311l-102.973669-313.080112-265.178712-91.787115c-10.469468-3.585434-16.062745-15.058824-12.333893-25.528291 1.864426-5.44986 6.023529-9.895798 11.329972-12.047059z" fill="#FCFDFC" ></path><path d="M929.385512 1023.569748c-3.155182 0-6.453782-0.286835-9.752381-1.003922-6.740616-1.434174-12.907563-4.015686-18.50084-8.031372L635.953579 825.940616l-146.142297 120.040336c-13.911485 11.473389-31.408403 16.779832-49.335574 15.058824-17.927171-1.721008-34.133333-10.32605-45.463305-24.237535-5.306443-6.453782-9.322129-13.768067-11.903642-21.79944l-98.527731-299.598879-251.697479-87.19776c-12.333894-4.302521-22.229692-13.05098-27.966386-24.811204s-6.453782-24.954622-2.151261-37.288515c4.589356-13.337815 14.771989-23.9507 27.82297-29.257143L1099.908761 3.585434c24.954622-10.039216 53.351261 2.007843 63.533894 26.819048 3.585434 8.891877 4.445938 18.644258 2.581513 28.109804L977.143495 984.560224c-4.732773 23.090196-25.098039 39.009524-47.757983 39.009524z m-294.579272-233.770308l282.962465 201.357983c2.294678 1.577591 4.87619 2.72493 7.601121 3.298599 10.89972 2.151261 21.512605-4.87619 23.663865-15.632493L1137.914364 52.777591c0.860504-3.872269 0.430252-7.887955-1.003922-11.616807-4.159104-10.32605-15.919328-15.202241-26.101961-11.043137L41.201759 463.52493c-5.306443 2.151261-9.465546 6.597199-11.47339 12.047059-1.721008 5.019608-1.434174 10.469468 0.860505 15.345658 2.294678 4.87619 6.453782 8.461625 11.473389 10.182633l265.178711 91.787115L410.214644 905.967507c1.434174 4.589356 3.872269 8.748459 6.884033 12.477311 6.597199 8.031373 15.919328 12.907563 26.101961 13.911485 10.32605 1.003922 20.365266-2.007843 28.396639-8.605042l163.208963-133.951821z" fill="#4A4A4A" ></path><path d="M307.097557 592.743978l105.698599 316.091876c6.310364 18.787675 26.532213 28.970308 45.319888 22.659944 4.159104-1.434174 7.887955-3.442017 11.186555-6.166946l164.786555-133.951821-165.360224-118.892997c297.017367-287.982073 447.462185-433.980952 451.191036-437.853222 0.573669-0.573669 2.581513-3.442017 0.430252-7.027451-1.290756-1.577591-3.298599-3.298599-7.027451-2.15126-202.218487 120.327171-404.293557 242.805602-606.22521 367.291877z" fill="#CAE0EE" ></path><path d="M446.786072 934.794398c-5.736695 0-11.329972-1.290756-16.636414-3.872269-8.891877-4.445938-15.632493-12.047059-18.787675-21.512605L305.376549 592.313725l1.003921-0.573669C507.308201 467.684034 711.391114 344.058263 912.60568 224.161345l0.286835-0.143418c3.585434-1.147339 6.310364-0.286835 8.605042 2.581513l0.143417 0.143417c2.438095 4.015686 0.573669 7.457703-0.573669 8.74846-3.872269 4.015686-155.177591 150.87507-450.043698 436.705882l165.503642 119.036414-166.220728 135.09916c-3.442017 2.868347-7.457703 5.019608-11.760225 6.453782-3.728852 1.290756-7.744538 2.007843-11.760224 2.007843z m-137.967507-341.333334l105.268348 314.944538c2.868347 8.748459 9.035294 15.77591 17.210084 19.935014 8.17479 4.159104 17.496919 4.732773 26.245378 1.864426 3.872269-1.290756 7.60112-3.298599 10.756302-5.880112l163.352381-132.804482L466.434252 672.627451l1.290756-1.147339C763.308201 384.932213 915.043775 237.642577 918.772627 233.626891c0 0 2.007843-2.294678 0.286835-5.306443-1.003922-1.290756-2.438095-2.438095-5.306443-1.577591-200.784314 119.610084-404.293557 242.94902-604.934454 366.718207z" fill="#CAE0EE" ></path><path d="M460.840974 924.898599l7.457703-253.561904 165.933894 119.896918-168.658824 135.959664c-1.290756 1.003922-3.011765 0.860504-4.015686-0.430252-0.430252-0.430252-0.717087-1.147339-0.717087-1.864426z" fill="#94C3E2" ></path><path d="M463.709322 929.344538c-1.290756 0-2.438095-0.573669-3.2986-1.577591-0.573669-0.860504-1.003922-1.864426-1.003921-2.868348l7.60112-256.286834 169.519328 122.621848-1.434174 1.147339-168.658823 135.959664c-0.860504 0.717087-1.721008 1.003922-2.72493 1.003922z m6.023529-255.282913l-7.457703 250.836974c0 0.286835 0.143417 0.717087 0.286835 1.003922 0.430252 0.573669 1.434174 0.717087 2.007843 0.286835l167.22465-134.812325-162.061625-117.315406z" fill="#94C3E2" ></path></symbol><symbol id="icon-lianjie" viewBox="0 0 1079 1024"><path d="M695.355535 432.666896c-0.553495-1.10699-0.885592-2.186305-1.383737-3.265619-0.193723-0.193723-0.193723-0.359772-0.359771-0.719543-12.508983-26.318678-39.436506-43.366319-69.325226-41.013966-39.076734 3.265619-68.439634 39.021384-65.312388 79.841627 0.857917 10.516401 3.653066 20.147211 7.998 28.83708 19.78744 46.659613 11.097571 103.448181-25.377737 141.750022l-191.094085 199.950001a118.088119 118.088119 0 0 1-171.998513 0c-47.434506-49.537786-47.434506-130.098956 0-179.636742l71.234782-74.389703-0.52582-0.553494a75.911814 75.911814 0 0 0 24.326097-61.880721c-3.127246-40.820243-37.3609-71.51153-76.437634-68.24591a69.463599 69.463599 0 0 0-46.908685 23.966325l-0.166049-0.193723-72.618519 75.856464c-103.226783 107.793115-103.226783 282.36538 0 390.158495 103.171433 107.793115 270.299193 107.793115 373.498301 0l191.619904-200.1714c80.256748-83.992838 97.636485-208.307773 52.83108-310.289193z" fill="#5c8add" ></path><path d="M1002.047012 80.865592c-103.226783-107.82079-270.382217-107.82079-373.581325 0l-191.619905 200.199075c-80.284423 83.854464-97.66416 208.197074-52.997128 310.233843 0.52582 1.079315 0.857917 2.15863 1.383737 3.26562 0.166048 0.166048 0.166048 0.359772 0.332097 0.719543 12.536658 26.291004 39.46418 43.366319 69.3529 41.013966 39.076734-3.265619 68.439634-39.021384 65.312388-79.869302a78.679288 78.679288 0 0 0-7.998-28.864755c-19.78744-46.631938-11.097571-103.448181 25.377737-141.750022l191.287808-199.839302a118.088119 118.088119 0 0 1 172.026188 0c47.434506 49.537786 47.434506 130.126631 0 179.692091l-71.234782 74.417378 0.52582 0.553495a75.939489 75.939489 0 0 0-24.353772 61.88072c3.15492 40.847917 37.3609 71.51153 76.465309 68.245911a69.463599 69.463599 0 0 0 46.908685-23.938651l0.166049 0.166048 72.646194-75.856464c103.03306-107.82079 103.03306-282.642127 0-390.269194z" fill="#5c8add" ></path></symbol><symbol id="icon-liaotian" viewBox="0 0 1171 1024"><path d="M1068.71699 0.243751H102.193768C46.228437 0.243751 0.500666 45.045267 0.500666 99.74309v696.251622c0 54.697824 45.727771 99.450589 101.693102 99.450589h329.113198l120.851966 114.465677a48.652788 48.652788 0 0 0 66.641644 0l120.851966-114.465677h329.064448c55.965331 0 101.741852-44.752765 101.741852-99.450589V99.74309C1170.458842 45.045267 1124.682321 0.243751 1068.71699 0.243751z m-439.776354 596.849784h-370.989696c-27.933915 0-50.846551-22.425133-50.846551-49.774045 0-27.348912 22.912636-49.725294 50.846551-49.725294h370.989696c27.933915 0 50.846551 22.376382 50.846551 49.725294 0 27.348912-22.912636 49.774045-50.846551 49.774045z m287.18795-211.381252H254.782171a50.456549 50.456549 0 0 1-50.846551-49.725294c0-27.397662 22.912636-49.774045 50.846551-49.774045h661.346415c27.933915 0 50.846551 22.376382 50.846551 49.774045 0 27.348912-22.912636 49.725294-50.846551 49.725294z" fill="#5C8ADD" ></path></symbol><symbol id="icon-xinfeng" viewBox="0 0 1400 1024"><path d="M1301.63733163 214.78520234a207.81921797 207.81921797 0 0 1 7.02423018 52.42036465v489.73590176a205.10753818 205.10753818 0 0 1-205.05853125 205.05853125H283.05853124A205.15654424 205.15654424 0 0 1 77.99999999 756.79444971V267.20556699a201.36672685 201.36672685 0 0 1 7.02423106-52.42036465L586.24393329 562.1905874c69.44187217 51.96297217 146.36536612 49.13694404 214.1736961 0zM1103.60303056 62.0000167H283.05853124A204.50312753 204.50312753 0 0 0 106.37462518 163.41030547l489.71956641 335.75823018c62.43397646 50.77048623 127.85733457 50.31309463 194.62019765 0L1280.28693749 163.41030547A204.68281729 204.68281729 0 0 0 1103.60303056 62.0000167z m0 0" fill="#5c8add" ></path></symbol><symbol id="icon-QQ1" viewBox="0 0 1024 1024"><path d="M0 512a512 512 0 1 0 1024 0A512 512 0 1 0 0 512z" fill="#18ACFC" ></path><path d="M500.113 228.39c118.396-1.518 178.924 61.004 201 156 3.497 15.048 0.15 34.807 0 50 27.143 5.682 33.087 60.106 10 75v1h1c8.26 14.33 19.04 28.125 26 44 7.332 16.723 9.306 35.16 14 55 4.024 17.01-2.287 51.505-10 57-0.771 0.683-2.231 1.312-3 2-14.601-3.016-30.377-16.865-38-27-3.065-4.074-5.275-9.672-10-12-0.395 21.568-12.503 41.15-22 55-3.514 5.123-14.073 13.217-14 18 3.691 2.836 8.305 2.956 13 5 10.513 4.577 25.449 13.168 32 22 2.334 3.146 5.548 7.555 7 11 16.193 38.414-36.527 48.314-63 54-27.185 5.839-77.818-10.224-92-19-8.749-5.414-16.863-18.573-29-19-3.666 2.389-14.438 1.132-20 1-16.829 32.804-101.913 47.868-148 31-14.061-5.146-43.398-17.695-38-40 4.437-18.327 19.947-29.224 35-37 5.759-2.975 18.915-4.419 22-10-13.141-8.988-24.521-28.659-31-44-3.412-8.077-4.193-25.775-9-32-7.789 12.245-32.097 36.91-52 33-3.071-4.553-7.213-9.097-9-15-4.792-15.835-1.81-40.379 2-54 8.117-29.02 16.965-50.623 32-72 4.672-6.643 11.425-12.135 16-19-8.945-9.733-6.951-37.536-1-49 4.002-7.709 9.701-7.413 10-20-1.92-3.022-0.071-8.604-1-13-4.383-20.75 3.273-47.552 9-63 19.8-53.421 53.712-90.466 105-112 11.986-5.033 25.833-7.783 39-11 5.322-1.3 11.969 0.518 16-2z" fill="#FFFFFF" ></path></symbol><symbol id="icon-rss" viewBox="0 0 1024 1024"><path d="M749.61196492 908.06119793C749.61196492 560.41848146 463.58151854 274.36328126 115.93880207 274.36328126V115.93880207c434.50388795 0 792.12239584 357.61850789 792.12239586 792.12239586zM224.55858562 690.72261555a108.91682943 108.91682943 0 0 1 108.69404499 108.74355267C333.25263061 859.29616292 284.24005737 908.06119793 224.31104736 908.06119793 164.48105265 908.06119793 115.96355592 859.41993206 115.96355592 799.46616822s48.69077351-108.71879883 108.61978351-108.74355267zM641.01693522 908.06119793h-153.96879069c0-203.60020956-167.50913289-371.13409627-371.10934246-371.13409629v-153.96879068c288.03550619 0 525.07813313 237.11688843 525.07813315 525.10288697z" fill="#FFA500" ></path></symbol><symbol id="icon-youxiang" viewBox="0 0 1024 1024"><path d="M583.60666667 972h-68.08c-8.43333333 0-15.33333333-6.9-15.33333334-15.33333333V609.52c0-8.43333333 6.9-15.33333333 15.33333334-15.33333333h68.08c8.43333333 0 15.33333333 6.9 15.33333333 15.33333333V956.66666667c0 8.43333333-6.9 15.33333333-15.33333333 15.33333333z" fill="#629FF9" ></path><path d="M294.42 167c-113.62 0-205.77333333 92-205.77333333 205.31333333v336.72h411.39333333V372.31333333c0.15333333-113.31333333-92-205.31333333-205.62-205.31333333z" fill="#2166CC" ></path><path d="M519.97333333 627H216.98666667c-25.45333333 0-46-20.54666667-46-46V393.78c0-25.45333333 20.54666667-46 46-46h302.98666666c25.45333333 0 46 20.54666667 46 46V581c0 25.45333333-20.54666667 46-46 46z" fill="#D2E4FF" ></path><path d="M565.97333333 397a49.22 49.22 0 0 0-49.37333333-49.22H220.36c-27.29333333 0-49.37333333 22.08-49.37333333 49.22v10.27333333l179.4 94.60666667c11.34666667 5.98 24.84 5.98 36.18666666 0l179.4-94.60666667v-10.27333333z" fill="#FFFFFF" ></path><path d="M730.5 167h-427.8v0.46c109.78666667 4.29333333 197.49333333 94.3 197.49333333 205.00666667v336.72h411.39333334c27.29333333 0 49.37333333-22.08 49.37333333-49.22V397c0-126.96-103.19333333-230-230.46-230z" fill="#4E8DF6" ></path><path d="M845.80666667 52H681.12666667c-9.04666667 0-16.40666667 7.36-16.40666667 16.40666667v336.72a24.67133333 24.67133333 0 1 0 49.37333333 0V134.18666667h131.71333334c9.04666667 0 16.40666667-7.36 16.40666666-16.40666667V68.40666667c0-9.04666667-7.36-16.40666667-16.40666666-16.40666667z" fill="#2166CC" ></path><path d="M896.25333333 659.81333333h-35.11333333c-8.43333333 0-15.33333333-6.9-15.33333333-15.33333333v-35.11333333c0-8.43333333 6.9-15.33333333 15.33333333-15.33333334h35.11333333c8.43333333 0 15.33333333 6.9 15.33333334 15.33333334v35.11333333c0 8.58666667-6.9 15.33333333-15.33333334 15.33333333z" fill="#FFFFFF" ></path><path d="M88.8 709.18666667l-24.22666667 131.40666666c-9.66 54.43333333 26.83333333 98.59333333 81.26666667 98.59333334h213.9c54.58666667 0 106.56666667-44.16 116.22666667-98.59333334l23.15333333-131.40666666H88.8z" fill="#2974CE" ></path></symbol><symbol id="icon-gitHub" viewBox="0 0 1049 1024"><path d="M523.6581816 52C262.83923907 52 52 262.8401375 52 523.6581816c0 208.49703047 135.09433812 384.97758117 322.50789391 447.44906532 23.42658172 4.68531653 32.01647887-10.15136894 32.01647796-22.64584583 0-10.93210574-0.78163433-48.41463703-0.78163433-87.45953855-131.18885996 28.11189824-158.5200223-56.22379738-158.52002231-56.22379739-21.08437312-54.66232469-52.3201152-68.71827336-52.3201152-68.71827335-42.94858371-28.89353348 3.12384382-28.89353348 3.12384384-28.89353348 47.63479867 3.12384382 72.62285398 48.41643391 72.62285398 48.4164339 42.16784782 71.84121875 110.10538527 51.53758242 137.43654672 39.04400399 3.90457972-30.45500618 16.3990566-51.5393793 29.67427028-63.25222094-104.64023039-10.93300418-214.74561566-51.53848086-214.74561657-232.70524742 0-51.53848086 18.74126609-93.70632867 48.4164339-126.50444187-4.68621496-11.71284164-21.08527156-60.12837711 4.6844181-124.94207075 0 0 39.82563922-12.49447688 129.62738726 48.41463704 37.48253129-10.15136894 78.08980484-15.61742227 117.91454562-15.61742137s80.43201433 5.46605242 117.91454473 15.61742137c89.80264648-60.90911391 129.62828571-48.41463703 129.62828571-48.41463704 25.76879122 64.81369363 9.37063305 113.22922911 4.68531651 124.94207075 30.45410773 32.79721477 48.41463703 74.96506258 48.41463703 126.50444187 0 181.16676656-110.10538527 220.99150644-215.52545401 232.70524742 17.1797934 14.83668547 32.01647887 42.94858371 32.01647886 87.45953946 0 63.25222094-0.78163433 114.009965-0.78163523 129.62738636 0 12.49447688 8.59079468 27.33116234 32.01737731 22.64584583 187.41265734-62.4705866 322.50699547-238.95203574 322.50699546-447.44996375C995.31636231 262.8401375 783.69369203 52 523.6581816 52z" fill="#663399" ></path><path d="M230.82365863 729.03136735c-0.7807359 2.34310703-4.68531653 3.12384382-7.80916035 1.56237113s-5.46605242-4.68531653-3.90368129-7.02842356c0.7807359-2.34220859 4.68531653-3.12384382 7.80826192-1.56147269s4.68531653 4.68531653 3.90457972 7.02752512z m18.7412661 21.08437312c-2.34220859 2.34220859-7.02752512 0.78163433-9.37063305-2.34310703-3.12294539-3.12294539-3.90457972-7.80826192-1.5614727-10.15136894 2.34220859-2.34220859 6.24678922-0.7807359 9.37063305 2.34310702 3.12384382 3.90457972 3.90457972 8.58899782 1.5614727 10.15136895zM268.30618992 777.44690281c-3.12294539 2.34220859-7.80826192 0-10.15136895-3.90457972-3.12384382-3.90457972-3.12384382-9.37063305 0-10.93210574 3.12384382-2.34310703 7.80916035 0 10.15226739 3.90457972 3.12294539 3.90368129 3.12294539 8.58899782 0 10.93210574z m25.76968965 26.55042555c-2.34220859 3.12294539-7.80916035 2.34220859-12.49447688-1.56237113-3.90457972-3.90368129-5.46605242-9.37063305-2.34220859-11.71284164 2.34220859-3.12384382 7.80826192-2.34310703 12.49447687 1.56147269 3.90368129 3.12384382 4.68531653 8.58989625 2.3422086 11.71374008z m35.1403227 14.83668637c-0.78163433 3.90457972-6.24768766 5.46605242-11.71374008 3.90457972-5.46605242-1.5614727-8.58899782-6.24768766-7.80916036-9.37063305 0.78163433-3.90457972 6.24768766-5.46605242 11.71374009-3.90457972 5.46605242 1.5614727 8.58899782 5.46605242 7.80916035 9.37063305z m38.26416562 3.12384382c0 3.90457972-4.68621496 7.02752512-10.15226738 7.02752512-5.46605242 0-10.15226738-3.12294539-10.15226739-7.02752512s4.68621496-7.02842356 10.15226739-7.02842445c5.46605242 0 10.15226738 3.12384382 10.15226738 7.02842445z m35.92016106-6.24768766c0.78163433 3.90457972-3.12384382 7.80916035-8.58899872 8.58989625-5.46695086 0.78163433-10.15226738-1.5614727-10.93390172-5.46605241-0.77983747-3.90457972 3.12384382-7.80916035 8.5907947-8.58899872 5.46605242-0.78163433 10.15136894 1.56057426 10.93210574 5.46515488z m0 0" fill="#663399" ></path></symbol><symbol id="icon-bilibili" viewBox="0 0 1024 1024"><path d="M832.61667555 181.33447111h-164.32545185l74.45617778-74.45617778c12.84020148-12.84020148 12.84020148-30.8140563 0-43.65425778-12.84020148-12.84020148-30.8140563-12.84020148-43.65425778 0L573.2882963 189.04101925H450.04420741L324.2272237 63.23617185c-10.26730667-12.84020148-25.68040297-15.40096-41.08136295-7.70654815-2.57289482 0-2.57289482 2.57289482-5.13365334 5.13365333-12.84020148 12.84020148-12.84020148 30.8140563 0 43.65425779l77.02907259 77.02907259h-164.32545185c-89.86927408 0-164.32545185 74.45617778-164.32545185 164.32545184v408.24073483c0 87.29637925 74.45617778 161.75255703 164.32545185 161.75255703h25.68040296c0 30.8140563 25.68040297 53.92156445 53.92156444 53.92156444s53.92156445-25.68040297 53.92156445-53.92156444H704.23893333c2.57289482 30.8140563 28.24116148 53.92156445 59.05521778 51.34866964 28.24116148-2.57289482 48.78791111-23.10750815 51.34866964-51.34866964h20.53461333c89.86927408 0 164.32545185-74.45617778 164.32545184-164.32545186V343.09916445c-2.56075852-89.86927408-77.02907259-161.76469333-166.88621037-161.76469334z m-5.13365333 634.19429926H200.99527111c-33.37481482 0-59.05521778-28.24116148-61.61597629-61.61597629l-2.57289482-415.94728297c0-33.37481482 28.24116148-61.6159763 61.6159763-61.61597629h626.48775111c33.37481482 0 59.05521778 28.24116148 61.61597629 61.61597629l2.57289482 415.94728297c-2.57289482 35.93557333-28.24116148 61.6159763-61.6159763 61.61597629z" fill="#ff7299" ></path><path d="M403.82919111 417.55534222l15.40096 77.0290726-205.40681481 38.50846815-15.40096-77.0290726 205.40681481-38.50846815z m197.70026667 77.0290726l15.40096-77.0290726 205.40681481 38.50846815-15.40096 77.0290726-205.40681481-38.50846815z m41.08136297 161.75255703c0 2.57289482 0 7.70654815-2.57289483 10.26730667-12.84020148 28.24116148-41.08136297 46.2150163-74.45617777 48.78791111-20.53461333 0-41.08136297-10.26730667-53.92156445-25.68040296-15.40096 15.40096-33.37481482 25.68040297-53.92156445 25.68040296-30.8140563-2.57289482-59.05521778-20.53461333-74.45617777-48.78791111 0-2.57289482-2.57289482-5.13365333-2.57289481-10.26730667 0-10.26730667 7.70654815-17.97385482 17.97385481-20.53461333h2.57289482c7.70654815 0 12.84020148 2.57289482 15.40096 10.26730666 0 0 20.53461333 28.24116148 38.50846815 28.24116149 35.94770963 0 35.94770963-30.8140563 56.48232296-53.92156445 23.10750815 25.68040297 23.10750815 53.92156445 56.48232296 53.92156445 23.10750815 0 38.50846815-28.24116148 38.50846815-28.24116149 2.57289482-5.13365333 10.26730667-10.26730667 15.40096-10.26730666 10.26730667-2.57289482 17.97385482 5.13365333 20.53461333 15.40096v5.13365333h0.0364089z" fill="#ff7299" ></path></symbol></svg>',      o = (o = document.getElementsByTagName("script"))[o.length - 1].getAttribute("data-injectcss"),      p = function (c, l) {        l.parentNode.insertBefore(c, l);      };    if (o && !c.__iconfont__svg__cssinject__) {      c.__iconfont__svg__cssinject__ = !0;      try {        document.write(          "<style>.svgfont {display: inline-block;width: 1em;height: 1em;fill: currentColor;vertical-align: -0.1em;font-size:16px;}</style>"        );      } catch (c) {        console && console.log(c);      }    }    function d() {      i || ((i = !0), a());    }    function m() {      try {        t.documentElement.doScroll("left");      } catch (c) {        return void setTimeout(m, 50);      }      d();    }    (l = function () {      var c,        l = document.createElement("div");      (l.innerHTML = v),        (v = null),        (l = l.getElementsByTagName("svg")[0]) &&          (l.setAttribute("aria-hidden", "true"),          (l.style.position = "absolute"),          (l.style.width = 0),          (l.style.height = 0),          (l.style.overflow = "hidden"),          (l = l),          (c = document.body).firstChild ? p(l, c.firstChild) : c.appendChild(l));    }),      document.addEventListener        ? ~["complete", "loaded", "interactive"].indexOf(document.readyState)          ? setTimeout(l, 0)          : ((h = function () {              document.removeEventListener("DOMContentLoaded", h, !1), l();            }),            document.addEventListener("DOMContentLoaded", h, !1))        : document.attachEvent &&          ((a = l),          (t = c.document),          (i = !1),          m(),          (t.onreadystatechange = function () {            "complete" == t.readyState && ((t.onreadystatechange = null), d());          }));  })(window);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/Blog/tags/index.html"/>
      <url>/Blog/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
